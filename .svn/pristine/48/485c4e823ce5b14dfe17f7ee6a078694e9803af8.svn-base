package Production;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.border.EtchedBorder;
import javax.swing.table.DefaultTableModel;

import main.ProdLauncher;

import org.jdesktop.swingx.JXTable;
import org.jdesktop.swingx.JXTitledSeparator;
import org.jdesktop.swingx.decorator.HighlighterFactory;

import util.Constantes;
import util.DateUtils;
import util.JasperUtils;
import util.Utils;

import com.sun.xml.internal.ws.resources.ModelerMessages;
import com.toedter.calendar.JDateChooser;

import dao.daoManager.ChargeProductionDAO;
import dao.daoManager.CompteStockMPDAO;
import dao.daoManager.DetailChargeFixeDAO;
import dao.daoManager.DetailChargeVariableDAO;
import dao.daoManager.EmployeDAO;
import dao.daoManager.ProductionDAO;
import dao.entity.ChargeProduction;
import dao.entity.CompteStockMP;
import dao.entity.DetailChargeFixe;
import dao.entity.DetailChargeVariable;
import dao.entity.FicheEmploye;
import dao.entity.Production;

import java.awt.Component;
import java.awt.GridBagLayout;

import javax.swing.JTable;


public class CoutProduction extends JLayeredPane implements Constantes{
	public JLayeredPane contentPane;	

	private DefaultTableModel	 Modelchargefix;
	
	private DefaultTableModel	 Modelchargevariable;
	
	
	private ImageIcon imgValider;
	private ImageIcon imgInit;
	private ImageIcon imgImprimer;
	private ImageIcon imgRechercher;
	private JDateChooser dateDebutChooser = new JDateChooser();
	private JDateChooser dateFinChooser = new JDateChooser();
	
	private Map< Integer, String> mapAvance= new HashMap<>();
	private Map< String, Float> mapParametre = new HashMap<>();
	
	private List<Production> listProduction=new ArrayList<Production>();
	private List<ChargeProduction> listChargeProduction=new ArrayList<ChargeProduction>();
	private List<DetailChargeFixe> listChargeFix=new ArrayList<DetailChargeFixe>();
	private List<DetailChargeVariable> listChargeVariable=new ArrayList<DetailChargeVariable>();
	
	private List<DetailChargeFixe> listChargeFixMP=new ArrayList<DetailChargeFixe>();
	private List<DetailChargeVariable> listChargeVariableMP=new ArrayList<DetailChargeVariable>();
	private DetailChargeFixeDAO detailchargefixedao;
	private DetailChargeVariableDAO detailchargevariabledao;
	private ProductionDAO productionDAO;
	private ChargeProductionDAO chargeproductionDAO;
	private JTextField txtqantitetotale;
	private JTextField txtcouttotale;
	private JTextField txtcouttotalchargefix;
	private JTextField txtcoutchargevariable;
	private JTextField txtsommecouts;
	private JTextField txtcoutunitaire;
	private JTextField txtcoutdechet;
	private JTextField txtcoutemployer;
	private JTextField txtcoutmp;
	private JTextField txtpourentagecoutmp;
	private JTextField txtpourcentagecoutemploye;
	private JTextField txtpourcentagecoutdechet;
	private JTable tablechargefixe;
	private JTable tablechargevariable;
	private JTextField txtcoutunitairemp;
	private JTextField txtcoutunitaireemploye;
	private JTextField txtcoutunitairedechet;
	private JTextField txtpourcentagedhmp;
	private JTextField txtpourcentagedhemploye;
	private JTextField txtpourcentagedhdechet;
	float quanititetotal=0;
	float couttotal=0;
	float couttotalchargefix=0;
	float couttotalchargevariable=0;
	float sommecouts=0;
	float coutunitaire=0;
	float coutmp=0;
	float coutemploye=0;
	float coutdechet=0;
	float pourcentagecoutmp=0;
	float pourcentagecoutemploye=0;
	float pourcentagecoutdechet=0;
	float pourcentagefix=0;
	float pourcentagevariable=0;
	float coutunitairemp=0;
	float coutunitaireemploye=0;
	float coutunitairedechet=0;
	float pourcentagedhmp=0;
	float pourcentagedhemploye=0;
	float pourcentagedhdechet=0;
	float coutunitairempfix=0;
	float coutunitairempvariable=0;
	float pourcentagedhmpfix=0;
	float pourcentagedhmpvariable=0;
	float pourcentagecouttotal=0;
	float porcentagequantitechargefix=0;
	float porcentagequantitechargevariable=0;
	
	/**
	 * Launch the application.
	 */


	/**
	 * Create the application.
	 */
	public CoutProduction() {
		setOpaque(true);
		setBackground(new Color(248, 248, 255));
		setForeground(new Color(248, 248, 255));

		final Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds(0, 0, 1284, 1026);
        try{
        	
        	chargeproductionDAO=ProdLauncher.chargeproductiondao;
        	productionDAO=ProdLauncher.productionDAO;
        	detailchargefixedao=ProdLauncher.detailchargefixdao;
        	detailchargevariabledao=ProdLauncher.detailchargevariabledao;
        	

       }catch(Exception exp){exp.printStackTrace();		
       JOptionPane.showMessageDialog(null, "Erreur de connexion √† la base de donn√©es", "Erreur", JOptionPane.ERROR_MESSAGE);
}
        
        try{
        	imgRechercher= new ImageIcon(this.getClass().getResource("/img/rechercher.png"));
            imgInit= new ImageIcon(this.getClass().getResource("/img/init.png"));
            imgImprimer=new ImageIcon(this.getClass().getResource("/img/imprimer.png"));
            imgValider=new ImageIcon(this.getClass().getResource("/img/valider.png"));
          } catch (Exception exp){exp.printStackTrace();}
		
        mapParametre=Utils.listeParametre();	 	
	
        try{
            imgInit= new ImageIcon(this.getClass().getResource("/img/init.png"));
          } catch (Exception exp){exp.printStackTrace();}
				  		     
				  		 
				  		     	
				  		     	JXTitledSeparator titledSeparator = new JXTitledSeparator();
				  		     	titledSeparator.setBackground(Color.RED);
				  		     	titledSeparator.setTitle("Cout Production");
				  		     	titledSeparator.setBounds(9, 64, 782, 30);
				  		     	add(titledSeparator);
				  		     	
				  		     	JLayeredPane layeredPane = new JLayeredPane();
				  		     	layeredPane.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
				  		     	layeredPane.setBounds(9, 11, 782, 54);
				  		     	add(layeredPane);
				  		     	
				  		     	JLabel lblDateDebut = new JLabel("Date d\u00E9but :");
				  		     	lblDateDebut.setBounds(10, 11, 96, 24);
				  		     	layeredPane.add(lblDateDebut);
				  		     	lblDateDebut.setFont(new Font("Tahoma", Font.PLAIN, 11));
				  		     	 
				  		     	 JLabel lblDateFin = new JLabel("Date Fin :");
				  		     	 lblDateFin.setBounds(262, 10, 102, 24);
				  		     	 layeredPane.add(lblDateFin);
				  		     	 lblDateFin.setFont(new Font("Tahoma", Font.PLAIN, 12));
		
		JButton btnAfficherStock = new JButton();
		btnAfficherStock.setIcon(imgRechercher);
		btnAfficherStock.setBounds(631, 11, 31, 31);
		layeredPane.add(btnAfficherStock);
		btnAfficherStock.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				  DecimalFormat format = new DecimalFormat("#0.00");
				 quanititetotal=00;
				 couttotal=00;
				 couttotalchargefix=00;
				 couttotalchargevariable=00;
				 sommecouts=00;
				 coutunitaire=00;
				 coutmp=00;
				 coutemploye=00;
				 coutdechet=00;
				int i=0;
				int j=0;
				int k=0;
				int l=0;
				 pourcentagecoutmp=00;
				 pourcentagecoutemploye=00;
				 pourcentagecoutdechet=00;
				 pourcentagefix=00;
				 pourcentagevariable=00;
				 coutunitairemp=00;
				 coutunitaireemploye=00;
				 coutunitairedechet=00;
				 pourcentagedhmp=00;
				 pourcentagedhemploye=00;
				 pourcentagedhdechet=00;
				 coutunitairempfix=00;
				 coutunitairempvariable=00;
				 pourcentagedhmpfix=00;
				 pourcentagedhmpvariable=00;
				 pourcentagecouttotal=00;
				 porcentagequantitechargefix=00;
				 porcentagequantitechargevariable=00;
			 listChargeProduction.clear();
				 listProduction.clear();
				 listChargeFix.clear();
			     listChargeVariable.clear();
				 listChargeVariableMP.clear();
				 listChargeFixMP.clear();
				 intialiserTableChargeFix();
				 intialiserTableChargeVariable();
				 
				 SimpleDateFormat simpleFormat = new SimpleDateFormat("MMyyyy");
				
				String dateDebut=((JTextField)dateDebutChooser.getDateEditor().getUiComponent()).getText();
				String dateFin=((JTextField)dateFinChooser.getDateEditor().getUiComponent()).getText();
			if(dateDebut.equals(""))	{
				JOptionPane.showMessageDialog(null, "Il faut choisir Date DÈbut", "Erreur", JOptionPane.ERROR_MESSAGE);
			} else if(dateFin.equals("")){
				JOptionPane.showMessageDialog(null, "Il faut choisir Date Fin", "Erreur", JOptionPane.ERROR_MESSAGE);
				
			}else  {
				
			
					
				String date=simpleFormat.format(dateDebutChooser.getDate());
				
				
				listChargeProduction=chargeproductionDAO.listeChargeProductionbycode(date);
				listProduction=productionDAO.listeProductionTerminerEntreDeuxDate(dateDebutChooser.getDate(), dateFinChooser.getDate(),Constantes.ETAT_OF_TERMINER);

while (i<listProduction.size())
				
{
	Production production=listProduction.get(i);
	quanititetotal=quanititetotal+production.getQuantiteReel();
	couttotal=couttotal+production.getCoutTotal();
	coutmp=coutmp+production.getCoutTotalMP();
	coutemploye=coutemploye+production.getCoutTotalEmploye()+production.getCoutTotalEmployeEmbalage()+production.getCoutTotalEmployeGen();
	coutdechet=coutdechet+production.getCoutDechet();
	
	
	
	i++;
}

while(j<listChargeProduction.size())	
{
	
	ChargeProduction chargeproduction=listChargeProduction.get(j);
	if(chargeproduction.getType().equals(Constantes.CHARGEST_FIX))
	{
		couttotalchargefix=couttotalchargefix+chargeproduction.getTotale();
		//listChargeFix=chargeproduction.getListdetailChargeFixe();
		
		
	}else if(chargeproduction.getType().equals(Constantes.CHARGEST_VARIABLE))
	{
		couttotalchargevariable=couttotalchargevariable+chargeproduction.getTotale();
		//listChargeVariable=chargeproduction.getListdetailChargeVariable();
	}
	
	
	j++;
}
		
				    sommecouts= couttotal + couttotalchargevariable + couttotalchargefix;
				    if(quanititetotal==0)
				    {
				    	coutunitaire=0;
				    	coutunitairemp=0;
				    	coutunitaireemploye=0;
				    	coutunitairedechet=0;
				    }else
				    {
				    	   coutunitaire=sommecouts / quanititetotal;
				    	   coutunitairemp=coutmp/quanititetotal;
							coutunitaireemploye=coutemploye/quanititetotal;
							coutunitairedechet=coutdechet/quanititetotal;
				    }
				 if(sommecouts==0)
				 {
					 pourcentagecoutdechet=0;
					 pourcentagecoutemploye=0;
					 pourcentagecoutmp=0;
					 pourcentagecouttotal=0;
					 porcentagequantitechargefix=0;
					 porcentagequantitechargevariable=0;
				 }else
				 {
					 pourcentagecoutdechet=(coutdechet/sommecouts)*100;
					    pourcentagecoutemploye=(coutemploye/sommecouts)*100;
					    pourcentagecoutmp=(coutmp/sommecouts)*100;
					    
						pourcentagecouttotal=(couttotal/sommecouts)*100;
						 porcentagequantitechargefix=(couttotalchargefix/sommecouts)*100;
						porcentagequantitechargevariable=(couttotalchargevariable/sommecouts)*100;
				 }
				   
					txtqantitetotale.setText(format.format(quanititetotal)+"");
					txtcouttotale.setText( format.format(couttotal)+"");
					txtcouttotalchargefix.setText(format.format(couttotalchargefix)+"");
					txtcoutchargevariable.setText(format.format(couttotalchargevariable)+"");
					txtsommecouts.setText(format.format(sommecouts)+"");
					txtcoutunitaire.setText(format.format(coutunitaire)+"");
					txtcoutmp.setText(format.format(coutmp)+"");
					txtcoutemployer.setText(format.format(coutemploye)+"");
					txtcoutdechet.setText(format.format(coutdechet)+"");
					
					pourcentagedhmp=coutunitairemp*(pourcentagecoutmp/100);
					pourcentagedhemploye=coutunitaireemploye*(pourcentagecoutemploye/100);
					pourcentagedhdechet=coutunitairedechet*(pourcentagecoutdechet/100);
				
					txtcoutunitairemp.setText(format.format(coutunitairemp)+"");
					txtcoutunitaireemploye.setText(format.format(coutunitaireemploye)+"");
					txtcoutunitairedechet.setText(format.format(coutunitairedechet)+"");
					txtpourcentagedhmp.setText(format.format(pourcentagedhmp)+Constantes.POURCENTAGEDH);
					txtpourcentagedhemploye.setText(format.format(pourcentagedhemploye)+Constantes.POURCENTAGEDH);
					txtpourcentagedhdechet.setText(format.format(pourcentagedhdechet)+Constantes.POURCENTAGEDH);
					txtpourentagecoutmp.setText(format.format(pourcentagecoutmp)+Constantes.POURCENTAGE);
					txtpourcentagecoutdechet.setText(format.format(pourcentagecoutdechet)+Constantes.POURCENTAGE);
					txtpourcentagecoutemploye.setText(format.format(pourcentagecoutemploye)+Constantes.POURCENTAGE);
					
					j=0;
					while(j<listChargeProduction.size())	
					{
						k=0;
						l=0;
						
						ChargeProduction chargeproduction=listChargeProduction.get(j);
						if(chargeproduction.getType().equals(Constantes.CHARGEST_FIX))
						{
							
								listChargeFixMP.addAll(chargeproduction.getListdetailChargeFixe());
							
							
								
							while(k<listChargeFixMP.size())
							{
								
								DetailChargeFixe detailchargefix=listChargeFixMP.get(k);
								if(sommecouts==0)
								{
									pourcentagefix=0;
								}else
								{
									pourcentagefix=(detailchargefix.getMontant()/sommecouts)*100;
								}
								if(quanititetotal==0)
								{
									coutunitairempfix=0;
								}
								else
								{
									coutunitairempfix=detailchargefix.getMontant()/quanititetotal;
								}
								
								pourcentagedhmpfix=(pourcentagefix/100)*coutunitairempfix;
								detailchargefix.setLibelle(detailchargefix.getLibelle());
								detailchargefix.setMontant(detailchargefix.getMontant());
								detailchargefix.setCoutunitairefixe(coutunitairempfix);
								detailchargefix.setPourcentagefixe(pourcentagefix/100);
								detailchargefix.setPourcentagedhfixe(pourcentagedhmpfix);
								detailchargefixedao.edit(detailchargefix);
								listChargeFix.add(detailchargefix);
								
								Object []ligne={detailchargefix.getLibelle(),detailchargefix.getMontant(),format.format(coutunitairempfix),format.format(pourcentagefix)+Constantes.POURCENTAGE,format.format(pourcentagedhmpfix)+Constantes.POURCENTAGEDH};

							Modelchargefix.addRow( ligne);
							
								k++;
							}
							
							
						}else if(chargeproduction.getType().equals(Constantes.CHARGEST_VARIABLE))
						{
							
							
								listChargeVariableMP.addAll(chargeproduction.getListdetailChargeVariable());
							
								
							
							while(l<listChargeVariableMP.size())
							{
								
								
								DetailChargeVariable detailchargevariable=listChargeVariableMP.get(l);
								if(sommecouts==0)
								{
									pourcentagevariable=0;
								}else
								{
									pourcentagevariable=(detailchargevariable.getMontant()/sommecouts)*100;
								}
								if(quanititetotal==0)
								{
									coutunitairempvariable=0;
								}
								else
								{
									coutunitairempvariable=detailchargevariable.getMontant()/quanititetotal;
								}
								
								pourcentagedhmpvariable=(pourcentagevariable/100)*coutunitairempvariable;
								detailchargevariable.setLibelle(detailchargevariable.getLibelle());
								detailchargevariable.setMontant(detailchargevariable.getMontant());
								detailchargevariable.setCoutunitaire(coutunitairempvariable);
								detailchargevariable.setPourcentage(pourcentagevariable/100);
								detailchargevariable.setPourcentagedh(pourcentagedhmpvariable);
								detailchargevariabledao.edit(detailchargevariable);
								listChargeVariable.add(detailchargevariable);
								
								Object []ligne={detailchargevariable.getLibelle(),detailchargevariable.getMontant(),format.format(coutunitairempvariable),format.format(pourcentagevariable)+Constantes.POURCENTAGE,format.format(pourcentagedhmpvariable)+Constantes.POURCENTAGEDH};

							Modelchargevariable.addRow( ligne);
								l++;
							}
							
							
						}
						
						
						
						j++;
					}
					
					
					
					tablechargefixe.setModel(Modelchargefix);
					
					
					tablechargevariable.setModel(Modelchargevariable);
					
					
					
					
				
					//	afficher_tableMP_Total(listObject);
			}
		  }
		});
		btnAfficherStock.setFont(new Font("Tahoma", Font.PLAIN, 11));
		
		 
		dateDebutChooser.setBounds(76, 11, 130, 24);
		layeredPane.add(dateDebutChooser);
		
		
		dateFinChooser.setBounds(324, 11, 140, 24);
		layeredPane.add(dateFinChooser);
		
		JLabel lblNewLabel = new JLabel("Quantit\u00E9 Total :");
		lblNewLabel.setFont(new Font("Tahoma", Font.BOLD, 13));
		lblNewLabel.setBounds(67, 105, 122, 23);
		add(lblNewLabel);
		
		JLabel lblCoutTotal = new JLabel("Cout Total :");
		lblCoutTotal.setFont(new Font("Tahoma", Font.BOLD, 13));
		lblCoutTotal.setBounds(67, 151, 122, 23);
		add(lblCoutTotal);
		
		JLabel lblQuantitTotalFixe = new JLabel("Quantit\u00E9 Total  Charge Fixe :");
		lblQuantitTotalFixe.setFont(new Font("Tahoma", Font.BOLD, 13));
		lblQuantitTotalFixe.setBounds(67, 185, 183, 23);
		add(lblQuantitTotalFixe);
		
		JLabel lblQuantitTotalCharge = new JLabel("Quantit\u00E9 Total  Charge Variable:");
		lblQuantitTotalCharge.setFont(new Font("Tahoma", Font.BOLD, 13));
		lblQuantitTotalCharge.setBounds(67, 227, 216, 23);
		add(lblQuantitTotalCharge);
		
		JXTitledSeparator titledSeparator_1 = new JXTitledSeparator();
		GridBagLayout gridBagLayout = (GridBagLayout) titledSeparator_1.getLayout();
		gridBagLayout.rowWeights = new double[]{0.0};
		gridBagLayout.rowHeights = new int[]{0};
		gridBagLayout.columnWeights = new double[]{0.0, 0.0, 0.0};
		gridBagLayout.columnWidths = new int[]{0, 0, 0};
		titledSeparator_1.setTitle("Somme Cout Production");
		titledSeparator_1.setBackground(Color.RED);
		titledSeparator_1.setBounds(9, 261, 782, 30);
		add(titledSeparator_1);
		
		JLabel lblSommeCouts = new JLabel("Somme Couts  :");
		lblSommeCouts.setFont(new Font("Tahoma", Font.BOLD, 13));
		lblSommeCouts.setBounds(67, 302, 122, 23);
		add(lblSommeCouts);
		
		JLabel lblCoutUnitaire = new JLabel("Cout Unitaire :");
		lblCoutUnitaire.setFont(new Font("Tahoma", Font.BOLD, 13));
		lblCoutUnitaire.setBounds(67, 336, 122, 23);
		add(lblCoutUnitaire);
		
		JXTitledSeparator titledSeparator_2 = new JXTitledSeparator();
		GridBagLayout gridBagLayout_1 = (GridBagLayout) titledSeparator_2.getLayout();
		gridBagLayout_1.rowWeights = new double[]{0.0};
		gridBagLayout_1.rowHeights = new int[]{0};
		gridBagLayout_1.columnWeights = new double[]{0.0, 0.0, 0.0};
		gridBagLayout_1.columnWidths = new int[]{0, 0, 0};
		titledSeparator_2.setTitle("Cout Total");
		titledSeparator_2.setBackground(Color.RED);
		titledSeparator_2.setBounds(9, 366, 782, 30);
		add(titledSeparator_2);
		
		JLabel lblCoutMatierePremiere = new JLabel("Cout Matiere Premiere  :");
		lblCoutMatierePremiere.setFont(new Font("Tahoma", Font.BOLD, 13));
		lblCoutMatierePremiere.setBounds(67, 437, 183, 23);
		add(lblCoutMatierePremiere);
		
		JLabel lblCoutEmploy = new JLabel("Cout Employ\u00E9  :");
		lblCoutEmploy.setFont(new Font("Tahoma", Font.BOLD, 13));
		lblCoutEmploy.setBounds(67, 476, 183, 23);
		add(lblCoutEmploy);
		
		JLabel lblCoutDechet = new JLabel("Cout Dechet :");
		lblCoutDechet.setFont(new Font("Tahoma", Font.BOLD, 13));
		lblCoutDechet.setBounds(67, 509, 183, 23);
		add(lblCoutDechet);
		
		JXTitledSeparator titledSeparator_3 = new JXTitledSeparator();
		GridBagLayout gridBagLayout_2 = (GridBagLayout) titledSeparator_3.getLayout();
		gridBagLayout_2.rowWeights = new double[]{0.0};
		gridBagLayout_2.rowHeights = new int[]{0};
		gridBagLayout_2.columnWeights = new double[]{0.0, 0.0, 0.0};
		gridBagLayout_2.columnWidths = new int[]{0, 0, 0};
		titledSeparator_3.setTitle("Cout Charge Fixe");
		titledSeparator_3.setBackground(Color.RED);
		titledSeparator_3.setBounds(9, 550, 782, 30);
		add(titledSeparator_3);
		 Modelchargefix =new DefaultTableModel(
	  		     	new Object[][] {
	  		     	},
	  		     	new String[] {
	  		     			"Libelle","Montant" ,"Cout Unitaire","Pourcentage","Pourcentage En DH"
	  		     			
	  		     	}
	  		  
				   ) {
	  		     	boolean[] columnEditables = new boolean[] {
	  		     		 false,false,false,false,false
	  		     	};
	  		     	public boolean isCellEditable(int row, int column) {
	  		     		return columnEditables[column];
	  		     	}
	  		     };
		
		JXTitledSeparator titledSeparator_4 = new JXTitledSeparator();
		GridBagLayout gridBagLayout_3 = (GridBagLayout) titledSeparator_4.getLayout();
		gridBagLayout_3.rowWeights = new double[]{0.0};
		gridBagLayout_3.rowHeights = new int[]{0};
		gridBagLayout_3.columnWeights = new double[]{0.0, 0.0, 0.0};
		gridBagLayout_3.columnWidths = new int[]{0, 0, 0};
		titledSeparator_4.setTitle("Cout Charge Variable");
		titledSeparator_4.setBackground(Color.RED);
		titledSeparator_4.setBounds(9, 755, 782, 30);
		add(titledSeparator_4);
		 Modelchargevariable =new DefaultTableModel(
	  		     	new Object[][] {
	  		     	},
	  		     	new String[] {
	  		     			"Libelle","Montant" ,"Cout Unitaire","Pourcentage","Pourcentage En DH"
	  		     			
	  		     	}
	  		  
				   ) {
	  		     	boolean[] columnEditables = new boolean[] {
	  		     		 false,false,false,false,false
	  		     	};
	  		     	public boolean isCellEditable(int row, int column) {
	  		     		return columnEditables[column];
	  		     	}
	  		     };
		
		txtqantitetotale = new JTextField();
		txtqantitetotale.setEditable(false);
		txtqantitetotale.setBounds(279, 102, 200, 30);
		add(txtqantitetotale);
		txtqantitetotale.setColumns(10);
		
		txtcouttotale = new JTextField();
		txtcouttotale.setEditable(false);
		txtcouttotale.setColumns(10);
		txtcouttotale.setBounds(279, 141, 200, 30);
		add(txtcouttotale);
		
		txtcouttotalchargefix = new JTextField();
		txtcouttotalchargefix.setEditable(false);
		txtcouttotalchargefix.setColumns(10);
		txtcouttotalchargefix.setBounds(279, 182, 200, 30);
		add(txtcouttotalchargefix);
		
		txtcoutchargevariable = new JTextField();
		txtcoutchargevariable.setEditable(false);
		txtcoutchargevariable.setColumns(10);
		txtcoutchargevariable.setBounds(279, 224, 200, 30);
		add(txtcoutchargevariable);
		
		txtsommecouts = new JTextField();
		txtsommecouts.setEditable(false);
		txtsommecouts.setColumns(10);
		txtsommecouts.setBounds(279, 299, 200, 30);
		add(txtsommecouts);
		
		txtcoutunitaire = new JTextField();
		txtcoutunitaire.setEditable(false);
		txtcoutunitaire.setColumns(10);
		txtcoutunitaire.setBounds(279, 333, 200, 30);
		add(txtcoutunitaire);
		
		txtcoutdechet = new JTextField();
		txtcoutdechet.setEditable(false);
		txtcoutdechet.setColumns(10);
		txtcoutdechet.setBounds(279, 509, 113, 30);
		add(txtcoutdechet);
		
		txtcoutemployer = new JTextField();
		txtcoutemployer.setEditable(false);
		txtcoutemployer.setColumns(10);
		txtcoutemployer.setBounds(279, 473, 113, 30);
		add(txtcoutemployer);
		
		txtcoutmp = new JTextField();
		txtcoutmp.setEditable(false);
		txtcoutmp.setColumns(10);
		txtcoutmp.setBounds(279, 434, 113, 30);
		add(txtcoutmp);
		
		JLabel lblPourcentage = new JLabel("Pourcentage");
		lblPourcentage.setFont(new Font("Tahoma", Font.BOLD, 13));
		lblPourcentage.setBounds(533, 407, 97, 23);
		add(lblPourcentage);
		
		JLabel lblCout = new JLabel("Cout Total");
		lblCout.setFont(new Font("Tahoma", Font.BOLD, 13));
		lblCout.setBounds(279, 407, 97, 23);
		add(lblCout);
		
		txtpourentagecoutmp = new JTextField();
		txtpourentagecoutmp.setEditable(false);
		txtpourentagecoutmp.setColumns(10);
		txtpourentagecoutmp.setBounds(533, 434, 103, 30);
		add(txtpourentagecoutmp);
		
		txtpourcentagecoutemploye = new JTextField();
		txtpourcentagecoutemploye.setEditable(false);
		txtpourcentagecoutemploye.setColumns(10);
		txtpourcentagecoutemploye.setBounds(533, 473, 103, 30);
		add(txtpourcentagecoutemploye);
		
		txtpourcentagecoutdechet = new JTextField();
		txtpourcentagecoutdechet.setEditable(false);
		txtpourcentagecoutdechet.setColumns(10);
		txtpourcentagecoutdechet.setBounds(533, 509, 103, 30);
		add(txtpourcentagecoutdechet);
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(10, 589, 782, 155);
		add(scrollPane);
		
		tablechargefixe = new JTable();
		tablechargefixe.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
					"Libelle","Montant" ,"Cout Unitaire","Pourcentage","Pourcentage En DH"
			}
		));
		tablechargefixe.setFillsViewportHeight(true);
		scrollPane.setViewportView(tablechargefixe);
		
		JScrollPane scrollPane_1 = new JScrollPane();
		scrollPane_1.setBounds(9, 793, 782, 167);
		add(scrollPane_1);
		
		tablechargevariable = new JTable();
		tablechargevariable.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
					"Libelle","Montant" ,"Cout Unitaire","Pourcentage","Pourcentage En DH"
			}
		));
		tablechargevariable.setFillsViewportHeight(true);
		scrollPane_1.setViewportView(tablechargevariable);
		
		JLabel lblCoutUnitaire_1 = new JLabel("Cout Unitaire");
		lblCoutUnitaire_1.setFont(new Font("Tahoma", Font.BOLD, 13));
		lblCoutUnitaire_1.setBounds(420, 407, 97, 23);
		add(lblCoutUnitaire_1);
		
		txtcoutunitairemp = new JTextField();
		txtcoutunitairemp.setEditable(false);
		txtcoutunitairemp.setColumns(10);
		txtcoutunitairemp.setBounds(402, 434, 113, 30);
		add(txtcoutunitairemp);
		
		txtcoutunitaireemploye = new JTextField();
		txtcoutunitaireemploye.setEditable(false);
		txtcoutunitaireemploye.setColumns(10);
		txtcoutunitaireemploye.setBounds(402, 473, 113, 30);
		add(txtcoutunitaireemploye);
		
		txtcoutunitairedechet = new JTextField();
		txtcoutunitairedechet.setEditable(false);
		txtcoutunitairedechet.setColumns(10);
		txtcoutunitairedechet.setBounds(402, 511, 113, 30);
		add(txtcoutunitairedechet);
		
		JLabel lblPourcentageEnDh = new JLabel("Pourcentage En DH");
		lblPourcentageEnDh.setFont(new Font("Tahoma", Font.BOLD, 13));
		lblPourcentageEnDh.setBounds(658, 407, 131, 23);
		add(lblPourcentageEnDh);
		
		txtpourcentagedhmp = new JTextField();
		txtpourcentagedhmp.setEditable(false);
		txtpourcentagedhmp.setColumns(10);
		txtpourcentagedhmp.setBounds(658, 437, 103, 30);
		add(txtpourcentagedhmp);
		
		txtpourcentagedhemploye = new JTextField();
		txtpourcentagedhemploye.setEditable(false);
		txtpourcentagedhemploye.setColumns(10);
		txtpourcentagedhemploye.setBounds(658, 473, 103, 30);
		add(txtpourcentagedhemploye);
		
		txtpourcentagedhdechet = new JTextField();
		txtpourcentagedhdechet.setEditable(false);
		txtpourcentagedhdechet.setColumns(10);
		txtpourcentagedhdechet.setBounds(658, 511, 103, 30);
		add(txtpourcentagedhdechet);
		
		JButton btnCoutProduction = new JButton("Cout Production");
		btnCoutProduction.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
	  		  	String datedebut=dateFormat.format(dateDebutChooser.getDate());
	  		  String datefin=dateFormat.format(dateFinChooser.getDate());
				Map parameters = new HashMap();
				
				
				parameters.put("quanititetotal",quanititetotal);
				parameters.put("couttotal", couttotal);
				parameters.put("couttotalchargefix", couttotalchargefix);
				parameters.put("couttotalchargevariable", couttotalchargevariable);
				parameters.put("sommecouts", sommecouts);
				parameters.put("coutunitaire", coutunitaire);
				parameters.put("coutmp", coutmp);
				parameters.put("coutemploye", coutemploye);
				parameters.put("coutdechet", coutdechet);			
				parameters.put("pourcentagecoutmp", pourcentagecoutmp/100);
				parameters.put("pourcentagecoutemploye", pourcentagecoutemploye/100);
				parameters.put("pourcentagecoutdechet", pourcentagecoutdechet/100);
				parameters.put("pourcentagecouttotal", pourcentagecouttotal/100);
				parameters.put("pourcentagequantitechargefix", porcentagequantitechargefix/100);
				parameters.put("pourcentagequantitechargevariable", porcentagequantitechargevariable/100);
				parameters.put("coutunitairemp", coutunitairemp);
				parameters.put("coutunitaireemploye", coutunitaireemploye);
				parameters.put("coutunitairedechet", coutunitairedechet);
				parameters.put("pourcentagedhmp", pourcentagedhmp);
				parameters.put("pourcentagedhemploye", pourcentagedhemploye);
				parameters.put("pourcentagedhdechet", pourcentagedhdechet);	
				parameters.put("datedebut", datedebut);
				parameters.put("datefin", datefin);
				
				JasperUtils.imprimerCoutProduction(listChargeProduction,parameters);
				
			
				
			}
		});
		btnCoutProduction.setFont(new Font("Tahoma", Font.PLAIN, 11));
		btnCoutProduction.setIcon(imgImprimer);
		btnCoutProduction.setBounds(300, 971, 133, 23);
		add(btnCoutProduction);
		
	
				  		     
				  		 
	}
	
	
	void	intialiserTableChargeFix(){
		 Modelchargefix =new DefaultTableModel(
	  		     	new Object[][] {
	  		     	},
	  		     	new String[] {
	  		     			"Libelle","Montant" ,"Cout Unitaire","Pourcentage","Pourcentage En DH"
	  		     	}
	  		     ) ;
	  		     
		 tablechargefixe.setModel(Modelchargefix); 
		 tablechargefixe.getColumnModel().getColumn(0).setPreferredWidth(30);
		 tablechargefixe.getColumnModel().getColumn(1).setPreferredWidth(160);
		 tablechargefixe.getColumnModel().getColumn(2).setPreferredWidth(40);
		 tablechargefixe.getColumnModel().getColumn(3).setPreferredWidth(40);
		 tablechargefixe.getColumnModel().getColumn(4).setPreferredWidth(40);
	  		
	}
	
	
	void	intialiserTableChargeVariable(){
		 Modelchargevariable =new DefaultTableModel(
	  		     	new Object[][] {
	  		     	},
	  		     	new String[] {
	  		     			"Libelle","Montant" ,"Cout Unitaire","Pourcentage","Pourcentage En DH"
	  		     	}
	  		     ) ;
	  		     
		 tablechargevariable.setModel(Modelchargevariable); 
		 tablechargevariable.getColumnModel().getColumn(0).setPreferredWidth(30);
		 tablechargevariable.getColumnModel().getColumn(1).setPreferredWidth(160);
		 tablechargevariable.getColumnModel().getColumn(2).setPreferredWidth(40);
		 tablechargevariable.getColumnModel().getColumn(3).setPreferredWidth(40);
		 tablechargevariable.getColumnModel().getColumn(4).setPreferredWidth(40);
	  		
	}
	
	
	
}
