package Production;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.EtchedBorder;
import javax.swing.table.DefaultTableModel;

import main.AuthentificationView;
import main.ProdLauncher;

import org.jdesktop.swingx.JXTable;
import org.jdesktop.swingx.JXTitledSeparator;
import org.jdesktop.swingx.decorator.HighlighterFactory;

import util.Constantes;
import util.JasperUtils;
import dao.daoManager.CompteurProductionDAO;
import dao.daoManager.ProductionDAO;
import dao.daoManager.StockMPDAO;
import dao.entity.CompteurProduction;
import dao.entity.CoutMP;
import dao.entity.DetailResponsableProd;
import dao.entity.Employe;
import dao.entity.Production;
import dao.entity.StockMP;


public class LancerOrdreFabrication extends JLayeredPane implements Constantes{
	public JLayeredPane contentPane;	
	
	private DefaultTableModel	 modeleMP;

	private JXTable  table = new JXTable();
	private ImageIcon imgImprimer;
	private ImageIcon imgValider;
	private ImageIcon imgAjouter;
	private ImageIcon imgInit;
	
	private JButton btnChercherOF;
	private JButton btnImprimer;
	private JButton btnAnnulerOF;
	private JButton btnLancerOF;
	private JButton btnRechercher;
	
	private JTextField quantite;
	private JTextField codeArticle;
	
	
	
	
	private ProductionDAO productionDAO;
	private StockMPDAO stockMPDAO;
	private CompteurProductionDAO compteurProductionDAO;
	
	private JComboBox<String> categorie;
	private JComboBox<String> comboMachine;
	private  JComboBox<String> comboLigneMachine;
	private List<CoutMP> listCoutMP =new ArrayList<CoutMP>();
	
	private Map< String, String> mapChargeSupp = new HashMap<>();
	
	private static Production production = new Production();
	
	private JComboBox<String> comboEquipe;
	private JTextField txtNumOF;
	private JLabel lblDescriptionOf;
	private JTextField txtDescription;
	private JTextField txtDateDebutPrev;
	private JTextField txtDateFinPrev;
	
	/**
	 * Launch the application.
	 */


	/**
	 * Create the application.
	 */
	public LancerOrdreFabrication() {
		setOpaque(true);
		setBackground(new Color(248, 248, 255));
		setForeground(new Color(248, 248, 255));

		final Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds(0, 0, 1284, 565);
        try{
        	
        	
        	productionDAO=ProdLauncher.productionDAO;
        	stockMPDAO=ProdLauncher.stockMPDAO;
        	compteurProductionDAO=ProdLauncher.compteurProductionDAO;
        	

       }catch(Exception exp){exp.printStackTrace();		
       JOptionPane.showMessageDialog(null, "Erreur de connexion Ã  la base de donnÃ©es", "Erreur", JOptionPane.ERROR_MESSAGE);
}
		
		 	
	String codeDepot=AuthentificationView.utilisateur.getCodeDepot();
        try{
            imgAjouter = new ImageIcon(this.getClass().getResource("/img/ajout.png"));
            imgValider = new ImageIcon(this.getClass().getResource("/img/valider.png"));
            imgInit= new ImageIcon(this.getClass().getResource("/img/init.png"));
            imgImprimer = new ImageIcon(this.getClass().getResource("/img/imprimer.png"));
          } catch (Exception exp){exp.printStackTrace();}
    
		
		
				  		  btnImprimer = new JButton("Fiche Calcule MP");
				  		 
				  		  btnImprimer.addActionListener(new ActionListener() {
				  		  	public void actionPerformed(ActionEvent e) {

					  		  	if(production.getId()>0 && production.getStatut().equals(Constantes.ETAT_OF_LANCER)){
					  		  	DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
					  		  	String date=dateFormat.format(production.getDate());
								 List<CoutMP> listCoutMP=production.getListCoutMP();
								 
								Map parameters = new HashMap();
								parameters.put("numOF", production.getNumOF());
								parameters.put("machine", production.getLigneMachine().getMachine().getNom());
								parameters.put("equipe", production.getEquipe().getNomEquipe());
								parameters.put("magasin", production.getMagasinProd().getLibelle());
								parameters.put("dateProd", date);
								JasperUtils.imprimerFicheCalculeMatierePremiere(listCoutMP,parameters,production.getNumOF());
								
								//JOptionPane.showMessageDialog(null, "PDF exporté avec succès", "Succès", JOptionPane.INFORMATION_MESSAGE);
					  		  	}else {
					  		  	JOptionPane.showMessageDialog(null, "Il faut Lancer OF avant d'imprimer ", "Erreur Impression", JOptionPane.ERROR_MESSAGE);
					  		  	}
					  		  	
				  		  	}
				  		  });
				  		  
				  		modeleMP =new DefaultTableModel(
				  		     	new Object[][] {
				  		     	},
				  		     	new String[] {
				  		     			"Code","Nom MP", "Quantité", "Charge Supplémetaire"
				  		     	}
				  		     ) {
				  		     	boolean[] columnEditables = new boolean[] {
				  		     			false,false,false, true
				  		     	};
				  		     	public boolean isCellEditable(int row, int column) {
				  		     		return columnEditables[column];
				  		     	}
				  		     };
				  		   table.setModel(modeleMP); 
				  		   table.getColumnModel().getColumn(0).setPreferredWidth(10);
				  		   table.getColumnModel().getColumn(1).setPreferredWidth(260);
				  		   table.getColumnModel().getColumn(2).setPreferredWidth(160);
				  		   table.getColumnModel().getColumn(3).setPreferredWidth(160);
				  		
				  		   txtNumOF = new JTextField();
				  		   btnImprimer.setIcon(imgImprimer);
				  		   btnImprimer.setFont(new Font("Tahoma", Font.PLAIN, 11));
				  		   btnImprimer.setBounds(388, 405, 131, 24);
				  		   add(btnImprimer);
				  		 
				  		   btnChercherOF = new JButton("Chercher OF");
				  		   btnChercherOF.setHorizontalAlignment(SwingConstants.LEADING);
				  		   btnChercherOF.addActionListener(new ActionListener() {
				  		  	public void actionPerformed(ActionEvent e) {
				  		  		

					  			
					  			production=productionDAO.findByNumOF(txtNumOF.getText(),codeDepot);
					  			if(production!=null){
					  			listCoutMP=productionDAO.listeCoutMP(production.getId());
					  			txtDescription.setText(production.getDescription());
					  			quantite.setText(""+production.getQuantiteEstime());
					  			codeArticle.setText(production.getArticles().getCodeArticle());
					  			categorie.addItem(production.getArticles().getLiblle());
					  			categorie.setSelectedItem(production.getArticles().getLiblle());
					  			
					  			comboEquipe.addItem(production.getEquipe().getNomEquipe());
					  			comboEquipe.setSelectedItem(production.getEquipe().getNomEquipe());
					  			
					  			comboLigneMachine.addItem(production.getLigneMachine().getNom());
					  			comboLigneMachine.setSelectedItem(production.getLigneMachine().getNom());
					  			
					  			comboMachine.addItem(production.getLigneMachine().getMachine().getNom());
					  			comboMachine.setSelectedItem(production.getLigneMachine().getMachine().getNom());
					  			
					  			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				  				String dateDebutPrev=dateFormat.format(production.getDate_debFabPre());
				  				String dateFinPrev=dateFormat.format(production.getDateFinFabPre());
					  			txtDateDebutPrev.setText(dateDebutPrev);
					  			txtDateFinPrev.setText(dateFinPrev);
					  			afficher_tableMP(listCoutMP);
					  			}else{
					  			  JOptionPane.showMessageDialog(null, "OF n'existe pas", "Erreur", JOptionPane.ERROR_MESSAGE);
					  				
					  			}

					  		
				  		  		
				  		  	}
				  		  });
				  		btnChercherOF.setIcon(new ImageIcon(CreerOrdreFabrication.class.getResource("/img/chercher.png")));
				  		 btnChercherOF.setFont(new Font("Tahoma", Font.PLAIN, 11));
				  		 btnChercherOF.setBounds(668, 14, 118, 23);
				  		 add(btnChercherOF);
				  		    
				  		    btnLancerOF = new JButton("Lancer OF");
				  		    btnLancerOF.setBounds(11, 405, 107, 24);
				  		    add(btnLancerOF);
				  		    btnLancerOF.setIcon(imgAjouter);
				  		    btnLancerOF.addActionListener(new ActionListener() {
				  		     	public void actionPerformed(ActionEvent e) {
				  		     		
				  		     		if(production.getStatut().equals(Constantes.ETAT_OF_CREER)){
				  		     		production.setDateDebFabRee(new Date());
				  		     		
				  		     		
				  		     		production.setUtilisateurMAJ(AuthentificationView.utilisateur);
				  		     		List<CoutMP> listCoutMP=reglerStockMatierePremiere(production.getListCoutMP(),production.getMagasinProd().getId(),production.getMagasinStockage().getId());
				  		     		
				  		     		List<DetailResponsableProd> listDetailResponsableProd=production.getListDetailResponsableProd();
				  		     		production.setStatut(Constantes.ETAT_OF_LANCER);
				  		     		productionDAO.edit(production);
				  		     		JOptionPane.showMessageDialog(null, "Ordre de Fabrication lancé avec succès!", "Succès", JOptionPane.INFORMATION_MESSAGE);
				  		     		/*try {
										EmailUtil.sendEmailSSL("systeme.production2016@gmail.com",
											"OF Lancé avec succès",
											registerMailBody());
									} catch (AddressException e1) {
										// TODO Auto-generated catch block
										e1.printStackTrace();
									} catch (MessagingException e1) {
										// TODO Auto-generated catch block
										e1.printStackTrace();
									}*/
				  		     		}else{
				  		     			JOptionPane.showMessageDialog(null, "Ordre de Fabrication est déjà lancé ou terminé!", "Attention", JOptionPane.INFORMATION_MESSAGE);
				  		     		}
				  		     	}
				  		     });
				  		    btnLancerOF.setFont(new Font("Tahoma", Font.PLAIN, 11));
				  		    comboEquipe = new JComboBox<String>();
				  		     btnAnnulerOF = new JButton("Initialiser");
				  		     btnAnnulerOF.setBounds(120, 406, 106, 23);
				  		     add(btnAnnulerOF);
				  		     btnAnnulerOF.addActionListener(new ActionListener() {
				  		     	public void actionPerformed(ActionEvent e) {
				  		     	intialiser();
				  		     		
				  		     	}
				  		     });
				  		     btnAnnulerOF.setIcon(imgInit);
				  		     btnAnnulerOF.setFont(new Font("Tahoma", Font.PLAIN, 11));
				  		    
				  		     table.setShowVerticalLines(false);
				  		     table.setSelectionBackground(new Color(51, 204, 255));
				  		     table.setRowHeightEnabled(true);
				  		     table.setBackground(new Color(255, 255, 255));
				  		     table.setHighlighters(HighlighterFactory.createSimpleStriping());
				  		     table.setColumnControlVisible(true);
				  		     table.setForeground(Color.BLACK);
				  		     table.setGridColor(new Color(0, 0, 255));
				  		     table.setAutoCreateRowSorter(true);
				  		     table.setBounds(2, 27, 411, 198);
				  		     table.setRowHeight(20);
				  		     	
				  		     	JScrollPane scrollPane = new JScrollPane(table);
				  		     	scrollPane.setBounds(9, 57, 782, 176);
				  		     	add(scrollPane);
				  		     	scrollPane.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
				  		     	 
				  		     	comboMachine = new JComboBox();		
			  		    
				  		     	
				  		     	JXTitledSeparator titledSeparator = new JXTitledSeparator();
				  		     	titledSeparator.setTitle("Liste Mati\u00E8res Premi\u00E8res ");
				  		     	titledSeparator.setBounds(9, 32, 782, 30);
				  		     	add(titledSeparator);
				  		     	
				  		     	JLayeredPane layeredPane = new JLayeredPane();
				  		     	layeredPane.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
				  		     	layeredPane.setBounds(10, 244, 781, 149);
				  		     	add(layeredPane);
				  		     	
				  		     	JLabel lblMachine = new JLabel("Machine");
				  		     	lblMachine.setBounds(10, 86, 58, 24);
				  		     	layeredPane.add(lblMachine);
				  		     	lblMachine.setFont(new Font("Tahoma", Font.PLAIN, 12));
				  		     	
				  		     	 
				  		     	 comboMachine.setBounds(119, 87, 136, 24);
				  		     	 layeredPane.add(comboMachine);
				  		     	 comboMachine.addItem("");
				  		     	 
				  		     	 JLabel lblGroupe = new JLabel("Ligne Machine");
				  		     	 lblGroupe.setBounds(283, 86, 77, 24);
				  		     	 layeredPane.add(lblGroupe);
				  		     	 lblGroupe.setFont(new Font("Tahoma", Font.PLAIN, 12));
				  		     	 comboLigneMachine = new JComboBox();
				  		     	 comboLigneMachine.setBounds(367, 87, 144, 24);
				  		     	 layeredPane.add(comboLigneMachine);
				  		     	 
				  		 
				  		  comboEquipe.setBounds(619, 87, 152, 24);
				  		  layeredPane.add(comboEquipe);
				  		  comboEquipe.addItem("");
				  		  
				  		  JLabel lblEquipe = new JLabel("Equipe");
				  		  lblEquipe.setBounds(550, 86, 51, 26);
				  		  layeredPane.add(lblEquipe);
				  		  
				  		  JLabel lblDatePrevue = new JLabel("Date D\u00E9but Pr\u00E9vue");
				  		  lblDatePrevue.setBounds(10, 48, 102, 26);
				  		  layeredPane.add(lblDatePrevue);
				  		  
				  		  JLabel lblDateFin = new JLabel("Date Fin pr\u00E9vue");
				  		  lblDateFin.setBounds(283, 48, 77, 26);
				  		  layeredPane.add(lblDateFin);
				  		  codeArticle = new JTextField();
				  		  codeArticle.setBounds(119, 10, 136, 26);
				  		  layeredPane.add(codeArticle);
				  		  categorie = new JComboBox();
				  		  categorie.setEnabled(false);
				  		  categorie.setEditable(true);
				  		  categorie.setBackground(Color.WHITE);
				  		  categorie.addItem("");
				  		  
		txtNumOF.addKeyListener(new KeyAdapter() {
		  	@Override
		  	public void keyReleased(KeyEvent e)
		  	{
		  		if (e.getKeyCode() == e.VK_ENTER)
		  		{
		  			
		  			production=productionDAO.findByNumOF(txtNumOF.getText(),codeDepot);
		  			if(production!=null){
		  			listCoutMP=productionDAO.listeCoutMP(production.getId());
		  			txtDescription.setText(production.getDescription());
		  			quantite.setText(""+production.getQuantiteEstime());
		  			codeArticle.setText(production.getArticles().getCodeArticle());
		  			categorie.addItem(production.getArticles().getLiblle());
		  			categorie.setSelectedItem(production.getArticles().getLiblle());
		  			
		  			//comboEquipe.addItem(production.getEquipe().getNomEquipe());
		  		//	comboEquipe.setSelectedItem(production.getEquipe().getNomEquipe());
		  			
		  			comboLigneMachine.addItem(production.getLigneMachine().getNom());
		  			comboLigneMachine.setSelectedItem(production.getLigneMachine().getNom());
		  			
		  			comboMachine.addItem(production.getLigneMachine().getMachine().getNom());
		  			comboMachine.setSelectedItem(production.getLigneMachine().getMachine().getNom());
		  			
		  			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
	  				String dateDebutPrev=dateFormat.format(production.getDate_debFabPre());
	  				String dateFinPrev=dateFormat.format(production.getDateFinFabPre());
		  			txtDateDebutPrev.setText(dateDebutPrev);
		  			txtDateFinPrev.setText(dateFinPrev);
		  			afficher_tableMP(listCoutMP);
		  			}else{
		  			  JOptionPane.showMessageDialog(null, "OF n'existe pas", "Erreur", JOptionPane.ERROR_MESSAGE);
		  				
		  			}

		  		}}});
		codeArticle.setColumns(10);
		
		  JLabel lblCodeArticle = new JLabel("Code Article");
		  lblCodeArticle.setBounds(8, 10, 82, 26);
		  layeredPane.add(lblCodeArticle);
		  lblCodeArticle.setFont(new Font("Tahoma", Font.PLAIN, 11));
		
		  categorie.setBounds(367, 13, 144, 26);
		  layeredPane.add(categorie);
		  categorie.addItem(""); 
		  
		  quantite = new JTextField();
		  quantite.setBounds(614, 11, 157, 26);
		  layeredPane.add(quantite);
		  quantite.setColumns(10);
		  
		  JLabel lblQuantite = new JLabel("Quantit\u00E9 :");
		  lblQuantite.setBounds(533, 12, 68, 26);
		  layeredPane.add(lblQuantite);
		  lblQuantite.setFont(new Font("Tahoma", Font.PLAIN, 11));
		  
		    
		    JLabel lblArticle = new JLabel("Article:");
		    lblArticle.setBounds(283, 11, 102, 26);
		    layeredPane.add(lblArticle);
		    lblArticle.setFont(new Font("Tahoma", Font.PLAIN, 12));
		    
		    txtDateDebutPrev = new JTextField();
		    txtDateDebutPrev.setColumns(10);
		    txtDateDebutPrev.setBounds(119, 51, 136, 26);
		    layeredPane.add(txtDateDebutPrev);
		    
		    txtDateFinPrev = new JTextField();
		    txtDateFinPrev.setColumns(10);
		    txtDateFinPrev.setBounds(367, 51, 144, 26);
		    layeredPane.add(txtDateFinPrev);
		
		txtNumOF.setBounds(91, 11, 144, 26);
		add(txtNumOF);
		txtNumOF.setColumns(10);
		
		JLabel lblNumOF = new JLabel("Num\u00E9ro OF");
		lblNumOF.setBounds(9, 12, 89, 24);
		add(lblNumOF);
		
		txtDescription = new JTextField();
		txtDescription.setBounds(347, 11, 308, 26);
		add(txtDescription);
		txtDescription.setColumns(10);
		
		lblDescriptionOf = new JLabel("Description OF");
		lblDescriptionOf.setBounds(263, 12, 89, 24);
		add(lblDescriptionOf);
		
		JButton btnValiderChargeSupp = new JButton("Valider Charge Supp");
		btnValiderChargeSupp.setIcon(imgValider);
		
		btnValiderChargeSupp.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				if(production.getStatut().equals(Constantes.ETAT_OF_LANCER)){	
			if(!remplirMapChargeSupp())	{
				JOptionPane.showMessageDialog(null, "Il faut remplir la quantité à charger ", "Erreur", JOptionPane.ERROR_MESSAGE);
			} else {
				
				  int reponse = JOptionPane.showConfirmDialog(null, "Vous voulez vraiment Valider cette charge ?", 
							"Satisfaction", JOptionPane.YES_NO_OPTION);
					 
					if(reponse == JOptionPane.YES_OPTION )
						{

				production.setListCoutMP(ajouetrChargeSupp(listCoutMP,mapChargeSupp,production.getMagasinProd().getId(),production.getMagasinStockage().getId()));
				productionDAO.edit(production);
				
				JOptionPane.showMessageDialog(null, "La charge a été ajouté avec succès", "Succès", JOptionPane.INFORMATION_MESSAGE);
						}
				
			/*	try {
					EmailUtil.sendEmailSSL("systeme.production2016@gmail.com",
						"Charge Supplémetaire",
						registerMailBody2());
				} catch (AddressException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} catch (MessagingException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}*/
			}
				}else {
					JOptionPane.showMessageDialog(null, "Il faut Lancer l'OF avant de valider la charge supplemntaire ", "Erreur", JOptionPane.ERROR_MESSAGE);	
				}
			
		  }
		});
		btnValiderChargeSupp.setFont(new Font("Tahoma", Font.PLAIN, 11));
		btnValiderChargeSupp.setBounds(228, 406, 158, 23);
		add(btnValiderChargeSupp);
		
		JButton btnImprimerSortieChargeSupp = new JButton("Bon Sortie Charge Supp");
		
		btnImprimerSortieChargeSupp.setIcon(imgImprimer);
		btnImprimerSortieChargeSupp.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

	  		  	if(production.getStatut().equals(Constantes.ETAT_OF_LANCER)){
	  		  	DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
	  		  	String date=dateFormat.format(production.getDate());
				 List<CoutMP> listCoutMP=production.getListCoutMP();
				 
				Map parameters = new HashMap();
				parameters.put("numOF", production.getNumOF());
				parameters.put("machine", production.getLigneMachine().getMachine().getNom());
				parameters.put("equipe", production.getEquipe().getNomEquipe());
				parameters.put("magasin", production.getMagasinProd().getLibelle());
				parameters.put("dateProd", date);
				JasperUtils.imprimerBonSortieMPChargeSupp(listCoutMP,parameters,production.getNumOF());
				
			//	JOptionPane.showMessageDialog(null, "PDF exporté avec succès", "Succès", JOptionPane.INFORMATION_MESSAGE);
	  		  	}else {
	  		  	JOptionPane.showMessageDialog(null, "Il faut Lancer OF avant d'imprimer ", "Erreur Impression", JOptionPane.ERROR_MESSAGE);
	  		  	}
	  		  	
  		  	
				
			}
		});
		btnImprimerSortieChargeSupp.setBounds(521, 406, 167, 23);
		add(btnImprimerSortieChargeSupp);
		
		JButton btnAnnulerOf = new JButton("Annuler OF");
		btnAnnulerOf.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
		    		
		    		if(production.getId()<=0){
		    			 JOptionPane.showMessageDialog(null, "Il faut Cherercher l'OF à Annuler", "Message", JOptionPane.ERROR_MESSAGE);
		    			
		    		}else {
		    			
		    			if(!production.getStatut().equals(ETAT_OF_ANNULER)){
		    				 if(production.getStatut().equals(ETAT_OF_LANCER)){
		    					 
		    					 CompteurProduction compteurProduction=compteurProductionDAO.findByDateProdPeriode(production.getDate(),production.getPeriode());
				    			 int compteurProd=compteurProduction.getCompteur();
				    			 compteurProd=compteurProd-1;
				    			 compteurProduction.setCompteur(compteurProd);
		    					 
		    			annulerOF(production.getListCoutMP(),production.getMagasinProd().getId(),production.getMagasinStockage().getId());
		    			
		    			production.setStatut(ETAT_OF_ANNULER);
		    			production.setUtilisateurAnnulation(AuthentificationView.utilisateur);
		    			
		    			productionDAO.edit(production);
		    			compteurProductionDAO.edit(compteurProduction);
		    			JOptionPane.showMessageDialog(null, "OF Annulé avec succès", "Message", JOptionPane.ERROR_MESSAGE); 
		    				 }else{
		    					JOptionPane.showMessageDialog(null, "OF n'est pas encore lancé", "Message", JOptionPane.ERROR_MESSAGE); 
		    				 }
		    			
		    			}else{
		    				JOptionPane.showMessageDialog(null, "OF est déjà Annulé", "Message", JOptionPane.ERROR_MESSAGE);
		    			}
		    		}
		    		
		    		
		    	}
		});
		btnAnnulerOf.setBounds(697, 406, 89, 23);
		add(btnAnnulerOf);
				  		     
				  		 
	}
	
	
	void intialiser()
	{
		quantite.setText("");
		codeArticle.setText("");
		categorie.setSelectedItem("");
		
	}
	
void 	intialiserTableau() {
		
		modeleMP =new DefaultTableModel(
  		     	new Object[][] {
  		     	},
  		     	new String[] {
  		     			"Code","Nom MP", "Quantité Calculée", "Quantité Existante", "Quantité Chargée", "Charge Supplémetaire",
  		     	}
  		     ) {
  		     	boolean[] columnEditables = new boolean[] {
  		     			false,false,false,false,false, true
  		     	};
  		     	public boolean isCellEditable(int row, int column) {
  		     		return columnEditables[column];
  		     	}
  		     };
  		   table.setModel(modeleMP); 
	}
	
	void afficher_tableMP(List<CoutMP> listCoutMP)
	{
	        float chargeSupp;
		  int i=0;
		  intialiserTableau();
			while(i<listCoutMP.size())
			{	
				
				CoutMP coutMP=listCoutMP.get(i);
			
				float quantiteTotal=coutMP.getQuantite();
				float quantiteExistante=coutMP.getQuantExistante();
				float quantiteACharge=coutMP.getQuantCharge();
				chargeSupp=coutMP.getQuantChargeSupp();
				
				Object []ligne={coutMP.getMatierePremier().getCode(),coutMP.getMatierePremier().getNom(),quantiteTotal+" "+coutMP.getMatierePremier().getCategorieMp().getSubCategorieMp().getUnite(),quantiteExistante,quantiteACharge,chargeSupp};

				modeleMP.addRow(ligne);
				i++;
			}
	}
	
	List<CoutMP>  reglerStockMatierePremiere(List<CoutMP> listCoutMP,int idMagasinProd,int idMagasinStockage){
	float quantiteStockage=0;
	float quantiteAConsomme=0;
	float quantiteProd=0;
	float prixUnitaire=0;
	float prixTotal=0;
	List<CoutMP> listCoutMPTmp=new ArrayList<CoutMP>();
	for(int i=0;i<listCoutMP.size();i++){ 
		quantiteStockage=0;
		CoutMP coutMP=listCoutMP.get(i);
	
		quantiteAConsomme=coutMP.getQuantCharge();
		StockMP stockMPProd=stockMPDAO.findStockByMagasinMP(coutMP.getMatierePremier().getId(),idMagasinProd );
		StockMP stockMPStockage=stockMPDAO.findStockByMagasinMP(coutMP.getMatierePremier().getId(),idMagasinStockage );
		
		quantiteProd=stockMPProd.getStock()+quantiteAConsomme;
		quantiteStockage=stockMPStockage.getStock()-quantiteAConsomme;
		
		
		/*prixUnitaire=coutMP.getQuantite()*coutMP.getPrixUnitaire()+coutMP.getQuantChargeSupp()*stockMPStockage.getPrixUnitaire();
		prixUnitaire=prixUnitaire/quantiteProd;
		prixTotal=prixUnitaire*quantiteConsomme;
		
		coutMP.setPrixUnitaire(prixUnitaire);
		coutMP.setPrixTotal(prixTotal);
		listCoutMPTmp.add(coutMP);*/
		stockMPStockage.setStock(quantiteStockage);
		stockMPProd.setStock(quantiteProd);
		stockMPDAO.edit(stockMPStockage);
		stockMPDAO.edit(stockMPProd);
		
	}
	return listCoutMPTmp;
  }

boolean remplirMapChargeSupp(){
	boolean trouve=false;
	float quantite=0;
	for(int j=0;j<table.getRowCount();j++){
		quantite =Float.parseFloat(table.getValueAt(j, 5).toString());
		
		if(!table.getValueAt(j, 5).toString().equals("") || quantite!=0){
			mapChargeSupp.put(table.getValueAt(j, 0).toString(), table.getValueAt(j, 5).toString());
			trouve=true;
		}else {
			mapChargeSupp.put(table.getValueAt(j, 0).toString(), "0");
		}
		
	}
	return trouve;
}

List<CoutMP> ajouetrChargeSupp(List<CoutMP> listCoutMP,Map< String, String> mapChargeSupp,int idMagasinProd,int idMagasinStockage){
	float QuantiteCharge=0;
	float QuantiteTotal=0;
	float coutTotal=0;
	float quantiteStockage=0;
	float quantiteConsomme=0;
	float quantiteProd=0;
	List<CoutMP> listCoutMPTmp= new ArrayList<CoutMP>();
	for(int i=0;i<listCoutMP.size();i++){
		CoutMP coutMP =listCoutMP.get(i);
		QuantiteCharge=Float.parseFloat(mapChargeSupp.get(coutMP.getMatierePremier().getCode()));
		
		StockMP stockMPStockage=stockMPDAO.findStockByMagasinMP(coutMP.getMatierePremier().getId(),idMagasinStockage );
		
		
		StockMP stockMPProd=stockMPDAO.findStockByMagasinMP(coutMP.getMatierePremier().getId(),idMagasinProd );
		
		
		quantiteProd=stockMPProd.getStock()+QuantiteCharge;
		quantiteStockage=stockMPStockage.getStock()-QuantiteCharge;
		
		/*prixUnitaire = (QuantiteCharge*stockMPStockage.getPrixUnitaire())+(stockMPProd.getPrixUnitaire()*stockMPProd.getStock());
		
		if(quantiteProd> 0)
		prixUnitaire=prixUnitaire/quantiteProd;*/
		
		QuantiteTotal=coutMP.getQuantChargeSupp()+QuantiteCharge;
		stockMPProd.setStock(quantiteProd);
		stockMPStockage.setStock(quantiteStockage);
		coutMP.setQuantChargeSupp(QuantiteTotal);
		
		
		stockMPDAO.edit(stockMPStockage);
		stockMPDAO.edit(stockMPProd);
		
		listCoutMPTmp.add(coutMP);
	}
	return listCoutMPTmp;
	
}



List<CoutMP>  annulerOF(List<CoutMP> listCoutMP,int idMagasinProd,int idMagasinStockage){
	float quantiteStockage=0;
	float quantiteAConsomme=0;
	float quantiteProd=0;
	float quantiteChargeSupp=0;

	List<CoutMP> listCoutMPTmp=new ArrayList<CoutMP>();
	for(int i=0;i<listCoutMP.size();i++){ 
		quantiteStockage=0;
		CoutMP coutMP=listCoutMP.get(i);
	/*	if(coutMP.getMatierePremier().getCategorieMp().getSubCategorieMp().getCode().equals(SOUS_CATEGORIE_MATIERE_PREMIERE_CELLOPHANE) ){
			quantiteAConsomme=coutMP.getQuantCharge();
		}else {
			quantiteAConsomme=coutMP.getQuantite()-coutMP.getQuantExistante();
		}*/
		quantiteAConsomme=coutMP.getQuantCharge();
		quantiteChargeSupp=coutMP.getQuantChargeSupp();
		
		StockMP stockMPProd=stockMPDAO.findStockByMagasinMP(coutMP.getMatierePremier().getId(),idMagasinProd );
		StockMP stockMPStockage=stockMPDAO.findStockByMagasinMP(coutMP.getMatierePremier().getId(),idMagasinStockage );
		
		quantiteProd=stockMPProd.getStock()-(quantiteAConsomme+quantiteChargeSupp);
		quantiteStockage=stockMPStockage.getStock()+(quantiteAConsomme+quantiteChargeSupp);
		
		
		/*prixUnitaire=coutMP.getQuantite()*coutMP.getPrixUnitaire()+coutMP.getQuantChargeSupp()*stockMPStockage.getPrixUnitaire();
		prixUnitaire=prixUnitaire/quantiteProd;
		prixTotal=prixUnitaire*quantiteConsomme;
		
		coutMP.setPrixUnitaire(prixUnitaire);
		coutMP.setPrixTotal(prixTotal);
		listCoutMPTmp.add(coutMP);*/
		stockMPStockage.setStock(quantiteStockage);
		stockMPProd.setStock(quantiteProd);
		stockMPDAO.edit(stockMPStockage);
		stockMPDAO.edit(stockMPProd);
		
	}
	return listCoutMPTmp;
  }


private static String registerMailBody() {
	return "<HTML><b>OF N°  :</b>"+production.getNumOF()+" a été lance <br><br>"
			
			+ "Merci pour votre confiance<br>"
			+ "Service Informatique<br>"
			+"Système Production</HTML>";
}


private static String registerMailBody2() {
	List<CoutMP> listCoutMP =new ArrayList<CoutMP>(); 
	
	listCoutMP =production.getListCoutMP();
	String mail;
	String mail1;
	String mail2 = "";
	String mail3;
	String MP[]= null;
	float quantite[] = null;
	for (int i=0;i< listCoutMP.size();i++){
		CoutMP coutMP=listCoutMP.get(i);
		if(coutMP.getQuantChargeSupp()>0)
		mail2=mail2+coutMP.getMatierePremier().getNom()+":"+coutMP.getQuantChargeSupp()+"<br><br>";
		
	}
		
	
	mail1= "<HTML><b>Charge Supplémentaire OF N°  :</b>"+production.getNumOF()+"  <br><br>";
			
	mail3		= "Merci pour votre confiance<br>"
			+ "Service Informatique<br>"
			+"Système Production</HTML>";
		
	
	return mail1+mail2+mail3;
}
}
