package Production;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.EtchedBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.JTextComponent;

import main.AuthentificationView;
import main.ProdLauncher;

import org.jdesktop.swingx.JXTable;
import org.jdesktop.swingx.JXTitledSeparator;
import org.jdesktop.swingx.decorator.HighlighterFactory;

import util.Constantes;
import util.JasperUtils;
import util.NumberUtils;
import util.Utils;
import dao.daoManager.ClientDAO;
import dao.daoManager.CompteStockMPDAO;
import dao.daoManager.CompteurEmployeProdDAO;
import dao.daoManager.CompteurProductionDAO;
import dao.daoManager.CompteurResponsableProdDAO;
import dao.daoManager.DetailProdGenDAO;
import dao.daoManager.EquipeDAO;
import dao.daoManager.FactureProductionDAO;
import dao.daoManager.FicheEmployeDAO;
import dao.daoManager.MatierePremiereDAO;
import dao.daoManager.ParametreDAO;
import dao.daoManager.ProductionDAO;
import dao.daoManager.StockMPDAO;
import dao.daoManager.StockPFDAO;
import dao.daoManager.TransferStockPFDAO;
import dao.entity.Articles;
import dao.entity.Client;
import dao.entity.CompteStockMP;
import dao.entity.CompteurEmployeProd;
import dao.entity.CompteurProduction;
import dao.entity.CoutMP;
import dao.entity.DetailEstimation;
import dao.entity.DetailFactureProduction;
import dao.entity.DetailProdGen;
import dao.entity.DetailProduction;
import dao.entity.DetailResponsableProd;
import dao.entity.DetailTransferProduitFini;
import dao.entity.Employe;
import dao.entity.Equipe;
import dao.entity.FactureProduction;
import dao.entity.FicheEmploye;
import dao.entity.MatierePremier;
import dao.entity.Parametre;
import dao.entity.Production;
import dao.entity.StockMP;
import dao.entity.StockPF;
import dao.entity.TransferStockPF;


public class TerminerOrdreFabrication extends JLayeredPane implements Constantes{
	public JLayeredPane contentPane;	
	
	private DefaultTableModel	 modeleMP;
	private DefaultTableModel	 modeleEmploye;
	private DefaultTableModel	 modeleEquipeEm;
	private DefaultTableModel	 modeleEquipeGen;
	private JXTable table= new JXTable();
	private JXTable table_1= new JXTable();
	private JXTable tableEmploye= new JXTable();
	private JXTable tableEmployeGen= new JXTable();
	private ImageIcon imgModifier;
	private ImageIcon imgAjouter;
	private ImageIcon imgInit;
	
	
	private JButton btnChercherOF;
	private JButton btnImprimer;
	private JButton btnTerminerOF;
	private JButton btnRechercher;
	private JTextField txtPrixServiceProd;
	private JTextField codeArticle;
	
	private JComboBox<String> comboMachine;
	private JComboBox<String> comboLigneMachine;
	private JComboBox categorie;
	
	private List<CoutMP> listCoutMP =new ArrayList<CoutMP>();
	private List<Employe> listEmploye=new ArrayList<Employe>();
	
	private List<DetailProduction> listDetailProduction =new ArrayList<DetailProduction>();
	private List<DetailProdGen> listeDetailProdGen=new ArrayList<DetailProdGen>();
	private Production production = new Production();
	
	private Map< Integer, String> mapDelaiEmploye = new HashMap<>();
	private Map< Integer, String> mapDelaiEmployeEmabalage = new HashMap<>();
	
	private Map< Integer, String> mapHeureSupp25EmployeProd = new HashMap<>();
	private Map< Integer, String> mapHeureSupp50EmployeProd = new HashMap<>();
	
	private Map< Integer, String> mapHeureSupp25EmployeEmbalage = new HashMap<>();
	private Map< Integer, String> mapHeureSupp50EmployeEmbalage = new HashMap<>();
	
	
	private Map< String, String> mapQuantiteDechet = new HashMap<>();
	private Map< String, String> mapQuantiteReste = new HashMap<>();
	private Map< String, String> mapQuantiteDechetFour = new HashMap<>();
	private Map< String, String> mapQuantiteManquante = new HashMap<>();
	private Map< String, String> mapQuantiteOffre = new HashMap<>();
	
	
	private JComboBox<String> comboEquipe;
	public JTextField txtNumOF;
	private JTextField txtQuantiteRealise;
	private JLabel lblQuantitRalise;
	
	private float coutTotalEmploye=0;
	private float coutTotalEmployeEmbalage=0;
	private float coutTotalAutreEmploye=0;
	private float coutTotalMP=0;
	private float coutTotalDechet=0;
	private JButton btnSaisieDelaiEquipeGen;
	private float delaiTotal=0;
	private float delaiTotalEquipeEmbalage;
	
	private DetailProdGenDAO detailProdGenDAO;
	private CompteurProductionDAO compteurProductionDAO;
	private StockMPDAO stockMPDAO;
	private StockPFDAO stockPFDAO;
	private ProductionDAO productionDAO;
	private TransferStockPFDAO transferStockPFDAO;
	private ParametreDAO parametreDAO;
	private FicheEmployeDAO ficheEmployeDAO;
	private CompteurResponsableProdDAO compteurResponsableProdDAO;
	private CompteurEmployeProdDAO compteurEmployeProdDAO;
	private  EquipeDAO equipeDAO;
	private FactureProductionDAO factureProductionDAO;
	private MatierePremiereDAO matierePremiereDAO;
	private CompteStockMPDAO compteStockMPDAO;
	private boolean validerSaisie=false;
	private String codeDepot;

	
	/**
	 * Launch the application.
	 */


	/**
	 * Create the application.
	 */
	@SuppressWarnings("serial")
	public TerminerOrdreFabrication(Production productionP,String quantite, String nbreHeure) {
		setOpaque(true);
		setBackground(new Color(248, 248, 255));
		setForeground(new Color(248, 248, 255));

		final Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds(0, 0, 1284, 623);
        try{
        	delaiTotalEquipeEmbalage=0;
        	delaiTotal=0;
        	coutTotalEmployeEmbalage=0;
        	coutTotalDechet=0;
        	coutTotalMP=0;
        	
        	listCoutMP =new ArrayList<CoutMP>();
        	listEmploye=new ArrayList<Employe>();
        	listDetailProduction =new ArrayList<DetailProduction>();
        	listeDetailProdGen=new ArrayList<DetailProdGen>();
        
        	
        	mapDelaiEmploye = new HashMap<>();
        	mapDelaiEmployeEmabalage= new HashMap<>();
        //	mapQuantiteConsomme = new HashMap<>();
        	mapQuantiteDechet = new HashMap<>();
        	mapQuantiteReste = new HashMap<>();
        	mapQuantiteDechetFour= new HashMap<>();
        	mapQuantiteManquante= new HashMap<>();
        	mapQuantiteOffre= new HashMap<>();
        	        	
        	mapHeureSupp25EmployeEmbalage= new HashMap<>();
        	mapHeureSupp50EmployeEmbalage= new HashMap<>();
        	mapHeureSupp25EmployeProd= new HashMap<>();
        	mapHeureSupp50EmployeProd= new HashMap<>();
        	productionDAO=ProdLauncher.productionDAO;
        	detailProdGenDAO=ProdLauncher.detailProdGenDAO;
        	compteurProductionDAO=ProdLauncher.compteurProductionDAO;
        	transferStockPFDAO=ProdLauncher.transferStockPFDAO;
        	stockMPDAO=ProdLauncher.stockMPDAO;
        	stockPFDAO=ProdLauncher.stockPFDAO;
        	parametreDAO=ProdLauncher.parametreDAO;
        	ficheEmployeDAO=ProdLauncher.ficheEmployeDAO;
        	compteurResponsableProdDAO=ProdLauncher.compteurResponsableProdDAO;
        	compteurEmployeProdDAO=ProdLauncher.compteurEmployeProdDAO;
        	equipeDAO=ProdLauncher.equipeDAO;
        	factureProductionDAO=ProdLauncher.factureProductionDAO;
        	matierePremiereDAO=ProdLauncher.dao;
        	compteStockMPDAO=ProdLauncher.compteStockMPDAO;
        	txtQuantiteRealise=new JTextField();
        	util.Utils.copycoller(txtQuantiteRealise);
			txtNumOF=new JTextField();
			 util.Utils.copycoller(txtNumOF);
			 txtPrixServiceProd = new JTextField();
			 util.Utils.copycoller(txtPrixServiceProd);
			 codeArticle=new JTextField();
			 util.Utils.copycoller(codeArticle);
			 categorie= new JComboBox();
			 comboEquipe=new JComboBox<String>();
			 comboLigneMachine=new JComboBox<String>();
			 
			 comboMachine=new JComboBox<String>();
        	if(productionP.getNumOF()!=null)
        	{
        		
        		production=productionP;
        		txtNumOF.setText(production.getNumOF());
        		txtQuantiteRealise.setText(quantite);
        		txtPrixServiceProd.setText(nbreHeure);
        		
        		
        		AfficherMatierePremiere();
        		
        		
        	}
        	else {	
        	production = new Production();
        	}
        	
        	
        	
       }catch(Exception exp){exp.printStackTrace();		
       JOptionPane.showMessageDialog(null, "Erreur de connexion Ã  la base de données", "Erreur", JOptionPane.ERROR_MESSAGE);
}
		
        validerSaisie=false;
	
        try{
            imgAjouter = new ImageIcon(this.getClass().getResource("/img/ajout.png"));
            imgInit= new ImageIcon(this.getClass().getResource("/img/init.png"));
            imgModifier= new ImageIcon(this.getClass().getResource("/img/modifier.png"));
          } catch (Exception exp){exp.printStackTrace();
          }
        codeDepot= AuthentificationView.utilisateur.getCodeDepot();
       
		
				  		  btnImprimer = new JButton("Imprimer D\u00E9tail OF");
				  		  btnImprimer.addActionListener(new ActionListener() {
				  		  	public void actionPerformed(ActionEvent e) {
				  		  
							 List<CoutMP> listCoutMP=productionDAO.listeCoutMP(production.getId());
							 
							Map parameters = new HashMap();
							parameters.put("numOF", production.getNumOF());
							parameters.put("ligneMachine", production.getLigneMachine().getNom());
							parameters.put("machine", production.getLigneMachine().getMachine().getNom());
							parameters.put("equipe", production.getEquipe().getNomEquipe());
							parameters.put("magasin", production.getMagasinProd().getLibelle());
							parameters.put("depot", production.getMagasinProd().getDepot().getLibelle());
							
							parameters.put("article", production.getArticles().getLiblle());
							parameters.put("CodeArticle", production.getArticles().getCodeArticle());
							parameters.put("quantiteDemande", production.getQuantiteEstime()+"");
							parameters.put("equipeGen", production.getEquipeGen().getNomEquipe());
							parameters.put("periode", production.getPeriode());
							
							parameters.put("quantiteRealise", production.getQuantiteReel()+"");
							parameters.put("heureTravaile", production.getNbreHeure()+"");
							
							
							JasperUtils.imprimerDetailOrdreFabrication(listCoutMP,parameters,production.getNumOF());
							
							//JOptionPane.showMessageDialog(null, "PDF exporté avec succès", "Succès", JOptionPane.INFORMATION_MESSAGE);
				  		  	}
				  		  });
				  		
				  		  		intialiserTableMP();
				  		  		initialiserTableauEmploye();
				  		  		initialiserTableauEquipeEmbalage();
				  		  		initialiserTableauEmployeGen();
				  		 	  		btnImprimer.setIcon(imgModifier);
				  		 btnImprimer.setFont(new Font("Tahoma", Font.PLAIN, 11));
				  		 btnImprimer.setBounds(612, 599, 143, 24);
				  		 add(btnImprimer);
				  		 
				  		  btnChercherOF = new JButton("Chercher OF");
				  		  btnChercherOF.setHorizontalAlignment(SwingConstants.LEADING);
				  		  btnChercherOF.addActionListener(new ActionListener() {
				  		  	public void actionPerformed(ActionEvent e) {
				  		production=productionDAO.findByNumOF(txtNumOF.getText(),codeDepot);
				  				if(production!=null){
				  				    
				  			  		 if(txtQuantiteRealise.getText().equals("")){
				  			  			JOptionPane.showMessageDialog(null, "Il faut saisir la quantité réalisée", "Erreur", JOptionPane.ERROR_MESSAGE);
				  					  }	else {
				  			  	List<CoutMP>	listCoutMPTmp=productionDAO.listeCoutMP(production.getId());
				  			  	afficherDetailPorduction(production.getArticles().getDetailEstimation(),listCoutMPTmp);
				  				
				  				
				  				codeArticle.setText(production.getArticles().getCodeArticle());
				  				categorie.addItem(production.getArticles().getLiblle());
				  				categorie.setSelectedItem(production.getArticles().getLiblle());
				  				
				  				//comboEquipe.addItem(production.getEquipe().getNomEquipe());
				  				//comboEquipe.setSelectedItem(production.getEquipe().getNomEquipe());
				  				
				  				comboLigneMachine.addItem(production.getLigneMachine().getNom());
				  				comboLigneMachine.setSelectedItem(production.getLigneMachine().getNom());
				  				
				  				comboMachine.addItem(production.getLigneMachine().getMachine().getNom());
				  				comboMachine.setSelectedItem(production.getLigneMachine().getMachine().getNom());
				  				
				  				DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				  				String dateDebutPrev=dateFormat.format(production.getDate_debFabPre());
				  				String dateFinPrev=dateFormat.format(production.getDateFinFabPre());
				  				
				  				List<DetailProdGen> listDetailProdGen=productionDAO.listeDetailProdGen(production.getId());
				  				List<DetailProduction> listDetailProduction=productionDAO.listeDetailProduction(production.getId());
				  				List<DetailResponsableProd> listDetailResponsableProd=productionDAO.listeDetailResponsableProd(production.getId());
				  				afficher_tableMP(listCoutMPTmp);
				  				afficher_tableEmploye(listDetailProduction);
				  				afficher_tableEmployeEmabalage(listDetailProdGen);
				  				afficher_tableEmployeGen(listDetailResponsableProd);
				  				
				  					  }
				  				}else{
				  				  JOptionPane.showMessageDialog(null, "OF n'existe pas", "Erreur", JOptionPane.ERROR_MESSAGE);
				  					
				  				}
				  		
				  		  		
				  		  	}
				  		  });
				  		  
				  		  
				  	
				  		btnChercherOF.setIcon(new ImageIcon(CreerOrdreFabrication.class.getResource("/img/chercher.png")));
				  		 btnChercherOF.setFont(new Font("Tahoma", Font.PLAIN, 11));
				  		 btnChercherOF.setBounds(871, 8, 120, 23);
				  		 add(btnChercherOF);
				  		    
				  		    btnTerminerOF = new JButton("Terminer OF");
				  		    btnTerminerOF.setBounds(204, 599, 112, 24);
				  		    add(btnTerminerOF);
				  		    btnTerminerOF.setIcon(imgAjouter);
				  		    btnTerminerOF.addActionListener(new ActionListener() {
				  		     	public void actionPerformed(ActionEvent e) {
				  		     	  int reponse = JOptionPane.showConfirmDialog(null, "Vous voulez vraiment Terminer cet Ordre de Fabrication?", 
											"Satisfaction", JOptionPane.YES_NO_OPTION);
									 
									if(reponse == JOptionPane.YES_OPTION )
										{
				  		     		if(txtQuantiteRealise.getText().equals("")){
				  		     			JOptionPane.showMessageDialog(null, "Il faut saisir la quantité réalisée!", "Erreur", JOptionPane.ERROR_MESSAGE);
				  		     		}else if(txtPrixServiceProd.getText().equals("")){
				  		     			JOptionPane.showMessageDialog(null, "Il faut saisir le Prix Unitaire :Service Production!", "Erreur", JOptionPane.ERROR_MESSAGE);
				  		     		}else if(production.getListDetailProdGen()==null || production.getListDetailProdGen().size()<0){
				  		     			JOptionPane.showMessageDialog(null, "Il faut valider les équipes avant de terminer OF!", "Erreur", JOptionPane.ERROR_MESSAGE);
				  		     		}
				  		     		else {
				  		     		if(production.getStatut().equals(Constantes.ETAT_OF_LANCER )) {
				  		     			
				  		     			if(validerSaisie=false){
				  		     				JOptionPane.showMessageDialog(null, "Il faut valider la saisie!", "Erreur", JOptionPane.ERROR_MESSAGE);
				  		     			}else {
				  		     			float coutTotal=coutTotalAutreEmploye+coutTotalEmploye+coutTotalEmployeEmbalage+coutTotalMP;
				  		     			
				  		     		production.setNbreHeure(Float.parseFloat(txtPrixServiceProd.getText()));
				  		     		production.setQuantiteReel(Float.parseFloat(txtQuantiteRealise.getText()));
				  		     		production.setDateDebFabRee(new Date());
				  		     		production.setUtilisateurMAJ(AuthentificationView.utilisateur);
				  		     		
				  		     		/* délai des employés Production*/
				  		     		for(int j=0;j<tableEmploye.getRowCount();j++){
				  		     			
				  		     			if(!tableEmploye.getValueAt(j, 3).toString().equals("")){
				  		     			mapDelaiEmploye.put(Integer.parseInt(tableEmploye.getValueAt(j, 0).toString()), tableEmploye.getValueAt(j, 3).toString());
				  		     			delaiTotal=delaiTotal+Float.parseFloat(tableEmploye.getValueAt(j, 3).toString());
				  		     			}else 
			  		     				mapDelaiEmploye.put(Integer.parseInt(tableEmploye.getValueAt(j, 0).toString()), String.valueOf(0));
				  		     			
				  		     			if(!tableEmploye.getValueAt(j, 4).toString().equals("")){
					  		     				mapHeureSupp25EmployeProd.put(Integer.parseInt(tableEmploye.getValueAt(j, 0).toString()), tableEmploye.getValueAt(j, 4).toString());
					  		     			}else 
					  		     				mapHeureSupp25EmployeProd.put(Integer.parseInt(tableEmploye.getValueAt(j, 0).toString()), String.valueOf(0));
				  		     			
				  		     			if(!tableEmploye.getValueAt(j, 5).toString().equals("")){
				  		     				mapHeureSupp50EmployeProd.put(Integer.parseInt(tableEmploye.getValueAt(j, 0).toString()), tableEmploye.getValueAt(j, 5).toString());
				  		     			}else 
				  		     				mapHeureSupp50EmployeProd.put(Integer.parseInt(tableEmploye.getValueAt(j, 0).toString()), String.valueOf(0));
				  		     		}
				  		     		
				  		     		/* délai des employés Emabalege*/
				  		     		for(int j=0;j<table_1.getRowCount();j++){
				  		     			if(!table_1.getValueAt(j, 3).toString().equals("")){
				  		     			mapDelaiEmployeEmabalage.put(Integer.parseInt(table_1.getValueAt(j, 0).toString()), table_1.getValueAt(j, 3).toString());
				  		     			delaiTotalEquipeEmbalage=delaiTotalEquipeEmbalage+Float.parseFloat(table_1.getValueAt(j, 3).toString());
				  		     			}
				  		     			else 
				  		     				mapDelaiEmployeEmabalage.put(Integer.parseInt(table_1.getValueAt(j, 0).toString()), String.valueOf(0));
				  		     			
				  		     			if(!table_1.getValueAt(j, 4).toString().equals("")){
				  		     				mapHeureSupp25EmployeEmbalage.put(Integer.parseInt(table_1.getValueAt(j, 0).toString()), table_1.getValueAt(j, 4).toString());
				  		     			}else 
				  		     				mapHeureSupp25EmployeEmbalage.put(Integer.parseInt(table_1.getValueAt(j, 0).toString()), String.valueOf(0));
			  		     			
			  		     			if(!table_1.getValueAt(j, 5).toString().equals("")){
			  		     				mapHeureSupp50EmployeEmbalage.put(Integer.parseInt(table_1.getValueAt(j, 0).toString()), table_1.getValueAt(j, 5).toString());
			  		     			}else 
			  		     				mapHeureSupp50EmployeEmbalage.put(Integer.parseInt(table_1.getValueAt(j, 0).toString()), String.valueOf(0));
				  		     			}
				  		     		
				  		     		listeDetailProdGen=production.getListDetailProdGen();
				  		     		listDetailProduction=production.getDetailProductions();
				  		     		
				  		     		production.setDetailProductions(calculeCoutEmploye(listDetailProduction,mapDelaiEmploye));
				  		     		production.setListDetailProdGen(calculeCoutEmployeEmbalage(listeDetailProdGen,mapDelaiEmployeEmabalage));
				  		     		remplirQuantite();
				  		     		 
				  		     		production.setListCoutMP(calculeCoutMatierePremiere(production.getListCoutMP()));
				  		     		
				  		     		production.setDateDebFabRee(new Date());
				  		     		
				  		     		
				  		     		//production.setListDetailResponsableProd(listDetailResponsableProd);
				  		     		
				  		     		production.setCoutTotalMP(coutTotalMP);
				  		     		production.setCoutTotalEmployeGen(coutTotalAutreEmploye);
				  		     		production.setCoutTotalEmployeEmbalage( coutTotalEmployeEmbalage);
				  		     		production.setCoutTotalEmploye(coutTotalEmploye);
				  		     		production.setCoutDechet(coutTotalDechet);
				  		     		coutTotal=coutTotalAutreEmploye+coutTotalEmploye+coutTotalEmployeEmbalage+coutTotalMP;
				  		     		production.setCoutTotal(coutTotal);
				  		     		production.setStatut(Constantes.ETAT_OF_TERMINER);
				  		     		productionDAO.edit(production);
				  		     		calculerStockCoutProduitFini(coutTotal);
				  		     		calculRemiseResponsableProduction(production.getDate(), production.getPeriode());
				  		     		JOptionPane.showMessageDialog(null, "Ordre de Fabrication Terminé avec succès!", "Succès", JOptionPane.INFORMATION_MESSAGE);
				  		     		
				  		     		int rep = JOptionPane.showConfirmDialog(null, "Vous voulez créer une facture de service ?", 
											"Satisfaction", JOptionPane.YES_NO_OPTION);
									 
									if(rep == JOptionPane.YES_OPTION )
										{
										List<DetailFactureProduction> listDetailFactureProduction= new ArrayList<DetailFactureProduction>();
										DetailFactureProduction detailFactureProduction= new DetailFactureProduction();
										FactureProduction factureProduction = new FactureProduction();
										
										ClientDAO clientDAO =ProdLauncher.clientDAO;
										
										
										Client clientFournisseur=new  Client();
										Client client=new  Client();
										
										if(production.getNumOF().substring(0, 1).equals(DEBUT_NUM_OF_PRODUCTION_TANTAN))
											 clientFournisseur=clientDAO.findClientByCodeClient(CODE_CLIENT_FOURNISSEUR_SERVICE_PRODUCTION_TANTAN);
										
										else if (production.getNumOF().substring(0, 1).equals(DEBUT_NUM_OF_PRODUCTION_LAAYOUNE))
											 clientFournisseur=clientDAO.findClientByCodeClient(CODE_CLIENT_FOURNISSEUR_SERVICE_PRODUCTION_LAAYOUNE);
										
										client=clientDAO.findClientByCodeClient(production.getMagasinStockage().getCodeMachine());
										
										/*Creation service production*/
										MatierePremier matierePremier=matierePremiereDAO.findByCode(MATIERE_PREMIERE_SERVICE_PRODUCTION);
										
										
										/**/
										
										/*creation de la facture */
										float montantGlobalFacture=0;
										float prixFacture=Float.parseFloat(txtPrixServiceProd.getText());
										float quantite=Float.parseFloat(txtQuantiteRealise.getText());
										float montantTotal =prixFacture*quantite;
										detailFactureProduction.setMatierePremier(matierePremier);
										detailFactureProduction.setPrixUnitaire(prixFacture);
										detailFactureProduction.setQuantite(quantite);
										detailFactureProduction.setMontantTotal(montantTotal);
										detailFactureProduction.setFactureProduction(factureProduction);
										listDetailFactureProduction.add(detailFactureProduction);
										 montantGlobalFacture=montantGlobalFacture+montantTotal;
										
										factureProduction.setClientFournisseurMP(clientFournisseur);
										factureProduction.setClientMP(client);
										factureProduction.setCreerPar(AuthentificationView.utilisateur);
										factureProduction.setDateFacture(new Date());
										factureProduction.setDetailFactureProduction(listDetailFactureProduction);
										factureProduction.setMontantTotal(montantGlobalFacture);
										factureProduction.setNumFacture(Utils.genererNumFactureProduction(FACTURE_PRODUCTION_LIBELLE));
										factureProduction.setNumOF(production.getNumOF());
										

										factureProductionDAO.add(factureProduction);
										JOptionPane.showMessageDialog(null, "Facture a été crée avec succès!", "Succès", JOptionPane.INFORMATION_MESSAGE);
										}
				  		     			}
				  		     		
				  		     		}else{
				  		     			JOptionPane.showMessageDialog(null, "Ordre de Fabrication n'est pas encore lancé ou terminé!", "Attention", JOptionPane.INFORMATION_MESSAGE);
				  		     		}
				  		     	  }
				  		     	 }
				  		     	}
				  		     });
				  		    	btnTerminerOF.setFont(new Font("Tahoma", Font.PLAIN, 11));
				  		     
				  		     table_1.setShowVerticalLines(true);
				  		     table_1.setSelectionBackground(new Color(51, 204, 255));
				  		     table_1.setRowHeightEnabled(true);
				  		     table_1.setBackground(new Color(255, 255, 255));
				  		     table_1.setHighlighters(HighlighterFactory.createSimpleStriping());
				  		     table_1.setColumnControlVisible(true);
				  		     table_1.setForeground(Color.BLACK);
				  		     table_1.setGridColor(new Color(0, 0, 255));
				  		     table_1.setAutoCreateRowSorter(true);
				  		     table_1.setBounds(2, 27, 411, 198);
				  		     table_1.setRowHeight(20);
				  		   DefaultCellEditor ce1 = (DefaultCellEditor) table_1.getDefaultEditor(Object.class);
					        JTextComponent textField1 = (JTextComponent) ce1.getComponent();
					        util.Utils.copycollercell(textField1);
				  		     table.setShowVerticalLines(true);
				  		     table.setSelectionBackground(new Color(51, 204, 255));
				  		     table.setRowHeightEnabled(true);
				  		     table.setBackground(new Color(255, 255, 255));
				  		     table.setHighlighters(HighlighterFactory.createSimpleStriping());
				  		     table.setColumnControlVisible(true);
				  		     table.setForeground(Color.BLACK);
				  		     table.setGridColor(new Color(0, 0, 255));
				  		     table.setAutoCreateRowSorter(true);
				  		     table.setBounds(2, 27, 411, 198);
				  		     table.setRowHeight(20);
				  		   DefaultCellEditor ce = (DefaultCellEditor) table.getDefaultEditor(Object.class);
					        JTextComponent textField = (JTextComponent) ce.getComponent();
					        util.Utils.copycollercell(textField);
				  		     	JScrollPane scrollPane = new JScrollPane(table);
				  		     	scrollPane.setBounds(8, 80, 1266, 186);
				  		     	add(scrollPane);
				  		     	scrollPane.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
				  		     	
				  		     	JXTitledSeparator titledSeparator = new JXTitledSeparator();
				  		     	titledSeparator.setTitle("Liste Mati\u00E8res Premi\u00E8res ");
				  		     	titledSeparator.setBounds(7, 59, 1267, 23);
				  		     	add(titledSeparator);
				  		  
		txtNumOF.addKeyListener(new KeyAdapter() {
		  	@Override
		  	public void keyReleased(KeyEvent e)
		  	{
		  		if (e.getKeyCode() == e.VK_ENTER)
		  		{
		  				
		  		
		  			production=productionDAO.findByNumOF(txtNumOF.getText(),codeDepot);
		  			if(production!=null){
				  		
				  		  if(txtQuantiteRealise.getText().equals("")){
				  			JOptionPane.showMessageDialog(null, "Il faut saisir la quantité réalisée", "Erreur", JOptionPane.ERROR_MESSAGE);
						  }	else {
				  	List<CoutMP>	listCoutMPTmp=production.getListCoutMP();
				  	afficherDetailPorduction(production.getArticles().getDetailEstimation(),listCoutMPTmp);
		  			listEmploye=production.getEquipe().getListEmploye();
		  			//txtDescription.setText(production.getDescription());
		  			//txtNbreHeure.setText(""+production.getQuantiteEstime());
		  			codeArticle.setText(production.getArticles().getCodeArticle());
		  			categorie.addItem(production.getArticles().getLiblle());
		  			categorie.setSelectedItem(production.getArticles().getLiblle());
		  			
		  			comboEquipe.addItem(production.getEquipe().getNomEquipe());
		  			comboEquipe.setSelectedItem(production.getEquipe().getNomEquipe());
		  			
		  			comboLigneMachine.addItem(production.getLigneMachine().getNom());
		  			comboLigneMachine.setSelectedItem(production.getLigneMachine().getNom());
		  			
		  			comboMachine.addItem(production.getLigneMachine().getMachine().getNom());
		  			comboMachine.setSelectedItem(production.getLigneMachine().getMachine().getNom());
		  			
		  			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
	  				String dateDebutPrev=dateFormat.format(production.getDate_debFabPre());
	  				String dateFinPrev=dateFormat.format(production.getDateFinFabPre());
		  			
		  			afficher_tableMP(listCoutMPTmp);
		  		//	afficher_tableEmploye(listEmploye);
						  }
		  			}else{
		  			  JOptionPane.showMessageDialog(null, "OF n'existe pas", "Erreur", JOptionPane.ERROR_MESSAGE);
		  				
		  			}
		  			
		  		

		  		}}});
		
		txtNumOF.setBounds(79, 6, 153, 26);
		add(txtNumOF);
		txtNumOF.setColumns(10);
		
		JLabel lblNumOF = new JLabel("Num\u00E9ro OF");
		lblNumOF.setBounds(9, 7, 89, 24);
		add(lblNumOF);
		
		JScrollPane scrollPane_1 = new JScrollPane(tableEmploye);
		scrollPane_1.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		scrollPane_1.setBounds(9, 281, 594, 314);
		add(scrollPane_1);
		tableEmploye.setHighlighters(HighlighterFactory.createSimpleStriping());
		tableEmploye.setShowVerticalLines(true);
		tableEmploye.setSelectionBackground(new Color(51, 204, 255));
		tableEmploye.setRowHeightEnabled(true);
		tableEmploye.setRowHeight(20);
		tableEmploye.setGridColor(new Color(0, 0, 255));
		tableEmploye.setForeground(Color.BLACK);
		tableEmploye.setColumnControlVisible(true);
		tableEmploye.setBackground(new Color(255, 255, 255));
		tableEmploye.setAutoCreateRowSorter(true);
	//	scrollPane_1.setViewportView(tableEmploye);
		 DefaultCellEditor ce2 = (DefaultCellEditor) tableEmploye.getDefaultEditor(Object.class);
	        JTextComponent textField2 = (JTextComponent) ce2.getComponent();
	        util.Utils.copycollercell(textField2);
		JXTitledSeparator titledSeparator_1 = new JXTitledSeparator();
		GridBagLayout gridBagLayout = (GridBagLayout) titledSeparator_1.getLayout();
		gridBagLayout.rowWeights = new double[]{0.0};
		gridBagLayout.rowHeights = new int[]{0};
		gridBagLayout.columnWeights = new double[]{0.0, 0.0, 0.0};
		gridBagLayout.columnWidths = new int[]{0, 0, 0};
		titledSeparator_1.setTitle("Saisir D\u00E9lai Equipe Production");
		titledSeparator_1.setBounds(9, 265, 594, 17);
		add(titledSeparator_1);
				  		    		  		     	
				  		    		  		     	JLayeredPane layeredPane = new JLayeredPane();
				  		    		  		     	layeredPane.setBounds(9, 34, 1265, 29);
				  		    		  		     	add(layeredPane);
				  		    		  		     	layeredPane.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
				  		    
				  		    btnSaisieDelaiEquipeGen = new JButton("Saisir Delai Equipe");
				  		    btnSaisieDelaiEquipeGen.addActionListener(new ActionListener() {
				  		    	public void actionPerformed(ActionEvent e) {
				  		    		
				  		    		
				  		    		
				  		    		if(production.getId()>0)
				  		    		{
				  		    			JFrame popupJFrame = new SaisirListeEmployeGen(production,txtQuantiteRealise.getText(),txtPrixServiceProd.getText());
						  		    	  popupJFrame.setVisible(true);
				  		    		}else
				  		    		{
				  		    			 JOptionPane.showMessageDialog(null, "OF introuvable !!!!!", "Erreur", JOptionPane.ERROR_MESSAGE);
				  		    		}
				  		    	  
				                 
				  		    		}
				  		    });
				  		    btnSaisieDelaiEquipeGen.setBounds(765, 599, 127, 24);
				  		    add(btnSaisieDelaiEquipeGen);
				  		    
				  		    JButton btnValiderSaisie = new JButton("Valider Saisie");
				  		    btnValiderSaisie.addActionListener(new ActionListener() {
				  		    	public void actionPerformed(ActionEvent e) {
				  		    		
				  		    		remplirQuantite();
				  		    		List<CoutMP>	listCoutMPTmp=productionDAO.listeCoutMP(production.getId());
								  	afficherDetailPorduction(production.getArticles().getDetailEstimation(),listCoutMPTmp);
				  		    		validerSaisiQuantiteDechetReste(listCoutMPTmp);
				  		    	}
				  		    });
				  		    btnValiderSaisie.setBounds(479, 599, 112, 24);
				  		    add(btnValiderSaisie);
				  		    
				  		  
				  		    txtQuantiteRealise.setBounds(345, 6, 153, 26);
				  		    add(txtQuantiteRealise);
				  		    txtQuantiteRealise.setColumns(10);
				  		    
				  		    lblQuantitRalise = new JLabel("Quantit\u00E9 r\u00E9alis\u00E9e:");
				  		    lblQuantitRalise.setBounds(242, 6, 102, 26);
				  		    add(lblQuantitRalise);
				  		    lblQuantitRalise.setFont(new Font("Tahoma", Font.PLAIN, 11));
				  		    
				  		    JScrollPane scrollPane_2 = new JScrollPane(table_1);
				  		    scrollPane_2.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
				  		    scrollPane_2.setBounds(628, 282, 646, 145);
				  		    add(scrollPane_2);
				  		    
				  		    JXTitledSeparator titledSeparator_2 = new JXTitledSeparator();
				  		    GridBagLayout gridBagLayout_1 = (GridBagLayout) titledSeparator_2.getLayout();
				  		    gridBagLayout_1.rowWeights = new double[]{0.0};
				  		    gridBagLayout_1.rowHeights = new int[]{0};
				  		    gridBagLayout_1.columnWeights = new double[]{0.0, 0.0, 0.0};
				  		    gridBagLayout_1.columnWidths = new int[]{0, 0, 0};
				  		    titledSeparator_2.setTitle("Saisir D\u00E9lai Equipe Embalage");
				  		    titledSeparator_2.setBounds(628, 265, 646, 17);
				  		    add(titledSeparator_2);
				  		    
				  		   
				  		    txtPrixServiceProd.setBounds(692, 6, 153, 26);
				  		    add(txtPrixServiceProd);
				  		    txtPrixServiceProd.setColumns(10);
				  		    
				  		    JLabel lblQuantite = new JLabel("Delai Service Production :");
				  		    lblQuantite.setBounds(527, 6, 175, 26);
				  		    add(lblQuantite);
				  		    lblQuantite.setFont(new Font("Tahoma", Font.PLAIN, 11));
				  		    
				  		    JButton btnAnnuler = new JButton("Annuler");
				  		    btnAnnuler.addActionListener(new ActionListener() {
				  		    	public void actionPerformed(ActionEvent e) {
				  		    		
				  		    		if(production.getId()<0){
				  		    			 JOptionPane.showMessageDialog(null, "Il faut Cherercher l'OF à Annuler", "Message", JOptionPane.ERROR_MESSAGE);
				  		    			
				  		    		}else {
				  		    			
				  		    			
				  		    			if(!production.getStatut().equals(ETAT_OF_ANNULER)){
				  		    				 if(production.getStatut().equals(ETAT_OF_TERMINER)){
				  		    					 
				  		    					CompteurProduction compteurProduction=compteurProductionDAO.findByDateProdPeriode(production.getDate(),production.getPeriode());
								    			 int compteurProd=compteurProduction.getCompteur();
								    			 compteurProd=compteurProd-1;
								    			 compteurProduction.setCompteur(compteurProd);
				  		    					 
				  		    			annulerStockMatierePremiere(production.getListCoutMP(),production.getMagasinProd().getId(),production.getMagasinStockage().getId());
				  		    			
				  		    			annulerStockProduitFini();
				  		    			
				  		    			deleteListeObject(ficheEmployeDAO.findByNumOf(production.getNumOF()));
				  		    			production.setStatut(ETAT_OF_ANNULER);
				  		    			production.setUtilisateurAnnulation(AuthentificationView.utilisateur);
				  		    			productionDAO.edit(production);
				  		    			compteurProductionDAO.edit(compteurProduction);
				  		    			JOptionPane.showMessageDialog(null, "OF Annulé avec succès", "Message", JOptionPane.ERROR_MESSAGE); 
				  		    				 }else{
				  		    					JOptionPane.showMessageDialog(null, "OF doit étre Terminé", "Message", JOptionPane.ERROR_MESSAGE); 
				  		    				 }
				  		    			
				  		    			}else{
				  		    				JOptionPane.showMessageDialog(null, "OF est déjà Annulé", "Message", JOptionPane.ERROR_MESSAGE);
				  		    			}
				  		    		}
				  		    		
				  		    		
				  		    	}
				  		    });
				  		    btnAnnuler.setBounds(326, 600, 143, 23);
				  		    add(btnAnnuler);
				  		    
				  		    JButton btnFactureService = new JButton("Facture Service ");
				  		    btnFactureService.addActionListener(new ActionListener() {
				  		    	public void actionPerformed(ActionEvent e) {
				  		    		
				  		    		FactureProduction	factureProduction=factureProductionDAO.findFactureProductionByNumOF(production.getNumOF());

						  		  	if(factureProduction.getId()>0){
						  		  	List<DetailFactureProduction> listDetailFactureProduction =new ArrayList<DetailFactureProduction>();
						  		  	DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
						  		  	String date=dateFormat.format(factureProduction.getDateFacture());
						  		  listDetailFactureProduction=factureProduction.getDetailFactureProduction();
						  		  
						  		float tva20=(float) (factureProduction.getMontantTotal()*0.2);
						  		float totalTTC=tva20+factureProduction.getMontantTotal();
									 
									Map parameters = new HashMap();
									parameters.put("nomClientFour", factureProduction.getClientFournisseurMP().getNom());
									parameters.put("adresseClientFour", factureProduction.getClientFournisseurMP().getAdresse());
									parameters.put("telClienFour", factureProduction.getClientFournisseurMP().getNumTel());
									parameters.put("numFacture", factureProduction.getNumFacture());
									parameters.put("dateFacture", date);
									parameters.put("nomClient", factureProduction.getClientMP().getNom());
									parameters.put("adresseClient", factureProduction.getClientMP().getAdresse());
									parameters.put("telClient", factureProduction.getClientMP().getNumTel());
									parameters.put("totalHorsTaxe", String.valueOf(factureProduction.getMontantTotal()));
									parameters.put("tva20", String.valueOf(tva20));
									parameters.put("totalTTC", String.valueOf(totalTTC));
									
								
									
									
									JasperUtils.imprimerFacutreProduction(listDetailFactureProduction,parameters,factureProduction.getNumFacture());
									
									//JOptionPane.showMessageDialog(null, "PDF exporté avec succès", "Succès", JOptionPane.INFORMATION_MESSAGE);
						  		  	}else {
						  		  	JOptionPane.showMessageDialog(null, "Facture n'existe pas !!", "Erreur Impression", JOptionPane.ERROR_MESSAGE);
						  		  	}
				  		    		
				  		    	}
				  		    });
				  		    btnFactureService.setBounds(902, 600, 120, 23);
				  		    add(btnFactureService);
				  		    
				  		    JButton btnSaisirDelaiEmploy_1 = new JButton("Saisir Delai Employ\u00E9 Production");
				  		    btnSaisirDelaiEmploy_1.addActionListener(new ActionListener() {
				  		    	public void actionPerformed(ActionEvent arg0) {
				  		    		if(production.getId()>0)
				  		    		{
				  		    			JFrame popupJFrame = new ListeEmploye(production,txtQuantiteRealise.getText(),txtPrixServiceProd.getText());
						  		    	  popupJFrame.setVisible(true);
				  		    		}else
				  		    		{
				  		    			JOptionPane.showMessageDialog(null, "Ordre de fabrication introuvable !!", "Erreur", JOptionPane.ERROR_MESSAGE);
				  		    		}
				  		    		
				  		    		
				  		    		
				  		    	}
				  		    });
				  		    btnSaisirDelaiEmploy_1.setBounds(9, 600, 185, 23);
				  		    add(btnSaisirDelaiEmploy_1);
				  		    
				  		    JButton btnSaisirDelaiEmploy = new JButton("Saisir Delai Employ\u00E9 Emballage");
				  		    btnSaisirDelaiEmploy.addActionListener(new ActionListener() {
				  		    	public void actionPerformed(ActionEvent arg0) {
				  		    		if(production.getId()>0)
				  		    		{
				  		    		JFrame popupJFrame = new ListeEmployeEmballage(production,txtQuantiteRealise.getText(),txtPrixServiceProd.getText());
					  		    	  popupJFrame.setVisible(true);
				  		    		}
				  		    		else
				  		    		{
				  		    			JOptionPane.showMessageDialog(null, "Ordre de fabrication introuvable !!", "Erreur", JOptionPane.ERROR_MESSAGE);
				  		    		}
				  		    	}
				  		    });
				  		    btnSaisirDelaiEmploy.setBounds(1037, 600, 185, 23);
				  		    add(btnSaisirDelaiEmploy);
				  		    
				  		    comboEquipe.setBounds(1065, 36, 157, 24);
				  		    add(comboEquipe);
				  		    
				  		    JLabel lblEquipe = new JLabel("Equipe");
				  		    lblEquipe.setBounds(1020, 35, 51, 26);
				  		    add(lblEquipe);
				  		   
				  		    comboLigneMachine.setBounds(853, 36, 157, 24);
				  		    add(comboLigneMachine);
				  		    
				  		   JLabel lblGroupe = new JLabel("Ligne Machine");
				  		   lblGroupe.setBounds(764, 35, 77, 24);
				  		   add(lblGroupe);
				  		   lblGroupe.setFont(new Font("Tahoma", Font.PLAIN, 12));
				  		   
				  		   comboMachine.setBounds(597, 36, 157, 24);
				  		   add(comboMachine);
				  		   
				  		   JLabel lblMachine = new JLabel("Machine");
				  		   lblMachine.setBounds(538, 35, 58, 24);
				  		   add(lblMachine);
				  		   lblMachine.setFont(new Font("Tahoma", Font.PLAIN, 12));
				  		  
				  		   categorie.setBounds(319, 35, 194, 26);
				  		   add(categorie);
				  		   
				  		   categorie.setForeground(Color.BLACK);
				  		   categorie.setBackground(Color.WHITE);
				  		   
				  		   JLabel label = new JLabel("Article:");
				  		   label.setBounds(262, 34, 102, 26);
				  		   add(label);
				  		   label.setFont(new Font("Tahoma", Font.PLAIN, 12));
				  		   
				  		   codeArticle.setBounds(83, 35, 153, 26);
				  		   add(codeArticle);
				  		   
				  		   codeArticle.setDisabledTextColor(Color.BLACK);
				  		   codeArticle.setBackground(Color.WHITE);
				  		   codeArticle.setEnabled(false);
				  		   codeArticle.setColumns(10);
				  		   
				  		     JLabel lblCodeArticle = new JLabel("Code Article");
				  		     lblCodeArticle.setBounds(9, 35, 82, 26);
				  		     add(lblCodeArticle);
				  		     lblCodeArticle.setFont(new Font("Tahoma", Font.PLAIN, 11));
				  		     
				  		     JScrollPane scrollPane_3 = new JScrollPane(tableEmployeGen);
				  		     
				  		     scrollPane_3.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
				  		     scrollPane_3.setBounds(625, 448, 649, 145);
				  		     add(scrollPane_3);
				  		   
				  		     tableEmployeGen.setHighlighters(HighlighterFactory.createSimpleStriping());
				  		     tableEmployeGen.setShowVerticalLines(true);
				  		     tableEmployeGen.setSelectionBackground(new Color(51, 204, 255));
				  		     tableEmployeGen.setRowHeightEnabled(true);
				  		     tableEmployeGen.setRowHeight(20);
				  		     tableEmployeGen.setGridColor(new Color(0, 0, 255));
				  		     tableEmployeGen.setForeground(Color.BLACK);
				  		     tableEmployeGen.setColumnControlVisible(true);
				  		     tableEmployeGen.setBackground(new Color(255, 255, 255));
				  		     tableEmployeGen.setAutoCreateRowSorter(true);
				  		   comboMachine.addItem("");
				  		    comboEquipe.addItem("");
				  		    
				  		  afficher_tableEmploye(production.getDetailProductions());
				  		  afficher_tableMP(production.getListCoutMP());
				  		  afficher_tableEmployeEmabalage(production.getListDetailProdGen());
				  		  afficher_tableEmployeGen(production.getListDetailResponsableProd());
				 	  		
	}
	
	
	  void AfficherMatierePremiere()
	  {
			
		 
			  
		  	List<CoutMP>	listCoutMPTmp=productionDAO.listeCoutMP(production.getId());
		  	afficherDetailPorduction(production.getArticles().getDetailEstimation(),listCoutMPTmp);
			
			
			codeArticle.setText(production.getArticles().getCodeArticle());
			categorie.addItem(production.getArticles().getLiblle());
			categorie.setSelectedItem(production.getArticles().getLiblle());
			
			
			comboLigneMachine.addItem(production.getLigneMachine().getNom());
			comboLigneMachine.setSelectedItem(production.getLigneMachine().getNom());
			
			comboMachine.addItem(production.getLigneMachine().getMachine().getNom());
			comboMachine.setSelectedItem(production.getLigneMachine().getMachine().getNom());
			
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			String dateDebutPrev=dateFormat.format(production.getDate_debFabPre());
			String dateFinPrev=dateFormat.format(production.getDateFinFabPre());
			
			List<DetailProdGen> listDetailProdGen=productionDAO.listeDetailProdGen(production.getId());
			List<DetailProduction> listDetailProduction=productionDAO.listeDetailProduction(production.getId());
			List<DetailResponsableProd> listDetailResponsableProd=productionDAO.listeDetailResponsableProd(production.getId());
			afficher_tableEmployeGen(listDetailResponsableProd);
			afficher_tableMP(listCoutMPTmp);
			afficher_tableEmploye(listDetailProduction);
			afficher_tableEmployeEmabalage(listDetailProdGen);
			
			
	  }
	
void	intialiserTableMP(){
		 modeleMP =new DefaultTableModel(
	  		     	new Object[][] {
	  		     	},
	  		     	new String[] {
	  		     			"CODE","NOM MP","QTE CALCULE","QTE EXISTANTE","QTE CHARGE","CHARGE SUPP", "QTE CONSOMME", "QTE DECHET","QTE DECHET FOUR", "QTE MANQUANTE", "QTE OFFRE", "QTE RESTE USINE", "ECART"
	  		     	}
	  		     ) {
	  		     	boolean[] columnEditables = new boolean[] {
	  		     			false,false,false,false,false,false,false, true, true, true,true, true,false
	  		     	};
	  		     	public boolean isCellEditable(int row, int column) {
	  		     		return columnEditables[column];
	  		     	}
	  		     };
	  		     
	  		   table.setModel(modeleMP); 
	  		   table.getColumnModel().getColumn(0).setPreferredWidth(30);
	  		   table.getColumnModel().getColumn(1).setPreferredWidth(160);
	  		   table.getColumnModel().getColumn(2).setPreferredWidth(40);
	  		   table.getColumnModel().getColumn(3).setPreferredWidth(40);
	  		   table.getColumnModel().getColumn(4).setPreferredWidth(40);
	  		   table.getColumnModel().getColumn(5).setPreferredWidth(40);
	  		   table.getColumnModel().getColumn(6).setPreferredWidth(40);
	  		   table.getColumnModel().getColumn(7).setPreferredWidth(60);
	  		   table.getColumnModel().getColumn(8).setPreferredWidth(60);
	  		   table.getColumnModel().getColumn(9).setPreferredWidth(60);
	  		   table.getColumnModel().getColumn(10).setPreferredWidth(60);
	  		   table.getColumnModel().getColumn(11).setPreferredWidth(60);
	  		   table.getColumnModel().getColumn(12).setPreferredWidth(40);
	}
	
void afficher_tableMP(List<CoutMP> listCoutMP)
	{
	
	
	intialiserTableMP();
		  int i=0;
		  NumberFormat nf = new DecimalFormat("0.###");
		
			while(i<listCoutMP.size())
			{	
				CoutMP coutMP=listCoutMP.get(i);
			
				float quantiteTotal=coutMP.getQuantite();
				float quantiteExistante=coutMP.getQuantExistante();
				float quantiteCharge=coutMP.getQuantCharge();
				float quantitechargeSupp=coutMP.getQuantChargeSupp();
				float quantiteConsomme=coutMP.getQuantConsomme();
				float quantiteDechet=coutMP.getQuantDechet();
				float quantiteDechetFour=coutMP.getQuantDechetFournisseur();
				float quantiteManquante=coutMP.getQuantiteManquante();
				float quantiteOffre=coutMP.getQuantiteOffre();
				float quantiteReste=coutMP.getQuantReste();
				
				double ecart=(quantiteCharge+quantitechargeSupp+quantiteExistante)-(quantiteConsomme+quantiteDechet+quantiteDechetFour+quantiteManquante+quantiteOffre+quantiteReste);
				
				ecart=NumberUtils.roundHalfDown(ecart,2 );
				 String strEcart = nf.format(ecart);
				
				Object []ligne={coutMP.getMatierePremier().getCode(),coutMP.getMatierePremier().getNom(),quantiteTotal+" "+coutMP.getMatierePremier().getCategorieMp().getSubCategorieMp().getUnite(),quantiteExistante,quantiteCharge,quantitechargeSupp,quantiteConsomme,quantiteDechet,quantiteDechetFour,quantiteManquante,quantiteOffre,quantiteReste,strEcart};

				modeleMP.addRow(ligne);
				i++;
			}
			  table.setModel(modeleMP); 
	}
	

void afficher_tableEmploye(List<DetailProduction> listDetailProduction)
	{
	initialiserTableauEmploye();
	float delai; 
	float heureSupp25; 
	float heureSupp50; 
	boolean absent=false;
		  int i=0;
			while(i<listDetailProduction.size())
			{	
				DetailProduction detailProduction=listDetailProduction.get(i);
				delai=detailProduction.getDelaiEmploye();
				heureSupp25=detailProduction.getHeureSupp25();
				heureSupp50=detailProduction.getHeureSupp50();
				absent=detailProduction.isAbsent();
				Object []ligne={detailProduction.getEmploye().getId(),detailProduction.getEmploye().getNumDossier(),detailProduction.getEmploye().getNom(),delai,heureSupp25,heureSupp50,absent};

				modeleEmploye.addRow(ligne);
				i++;
			}
			tableEmploye.setModel(modeleEmploye);
	}

void afficher_tableEmployeEmabalage(List<DetailProdGen> listDetailProdGen)
{
	initialiserTableauEquipeEmbalage();
	float delai; 
	float heureSupp25; 
	float heureSupp50; 
	boolean absent=false;
	  int i=0;
		while(i<listDetailProdGen.size())
		{	
			DetailProdGen detailProdGen=listDetailProdGen.get(i);
			
			delai =detailProdGen.getDelaiEmploye();
			heureSupp25=detailProdGen.getHeureSupp25();
			heureSupp50=detailProdGen.getHeureSupp50();
			absent=detailProdGen.isAbsent();
			Object []ligne={detailProdGen.getEmploye().getId(),detailProdGen.getEmploye().getNumDossier(),detailProdGen.getEmploye().getNom(),delai,heureSupp25,heureSupp50,absent};

			modeleEquipeEm.addRow(ligne);
			i++;
		}
		table_1.setModel(modeleEquipeEm);
}

void afficher_tableEmployeGen(List<DetailResponsableProd> listDetailResponsableProd)
{
initialiserTableauEmployeGen();
float delai; 
float heureSupp25; 
float heureSupp50; 
boolean absent=false;
	  int i=0;
		while(i<listDetailResponsableProd.size())
		{	
			DetailResponsableProd detailResponsableProd=listDetailResponsableProd.get(i);
			delai=detailResponsableProd.getDelaiEmploye();
			heureSupp25=detailResponsableProd.getHeureSupp25();
			heureSupp50=detailResponsableProd.getHeureSupp50();
			absent=detailResponsableProd.isAbsent();
			Object []ligne={detailResponsableProd.getEmploye().getId(),detailResponsableProd.getEmploye().getNumDossier(),detailResponsableProd.getEmploye().getNom(),delai,heureSupp25,heureSupp50,absent};

			modeleEquipeGen.addRow(ligne);
			i++;
		}
		tableEmployeGen.setModel(modeleEquipeGen);
}
	
List<DetailProduction> calculeCoutEmploye(List<DetailProduction> listDetailProduction,Map< Integer, String> mapDelaiEmploye){
		float delai=0;
		
		float remise=0;
		float coutHoraire=0;
		float heureSupp25; 
		float heureSupp50; 
		
		float coutSupp25=0;
		float coutSupp50=0;
		
		List<DetailProduction> listDetailProductionTmp= new ArrayList<DetailProduction>();
		for(int i=0;i<listDetailProduction.size();i++){
			
			remise=0;
			delai=0;
			coutHoraire=0;
			heureSupp25=0;
			heureSupp50=0;
			coutSupp25=0;
			coutSupp50=0;
			DetailProduction detailProduction =listDetailProduction.get(i);
			
			if(!detailProduction.getEmploye().isSalarie()){
				
				delai=Float.parseFloat(mapDelaiEmploye.get(detailProduction.getEmploye().getId()));
				heureSupp25=Float.parseFloat(mapHeureSupp25EmployeProd.get(detailProduction.getEmploye().getId()));
				heureSupp50=Float.parseFloat(mapHeureSupp50EmployeProd.get(detailProduction.getEmploye().getId()));
			
			if(detailProduction.isAbsent()==true){
	    		
		   		 String code=Utils.genereCodeDateMoisAnnee(production.getDate());
					 
		   		 Utils.compterAbsenceEmploye(code, detailProduction.getEmploye(), production.getDate());
		   		 
		   		 delai=0;
		   		 heureSupp25=0;
		   		 heureSupp50=0;
		   		 
		   		 
		   		 
		   		}
			
			
				
			coutHoraire=detailProduction.getEmploye().getCoutHoraire()*delai;
			coutSupp25=heureSupp25*COUT_HEURE_SUPPLEMENTAIRE_25;
			coutSupp50=heureSupp50*COUT_HEURE_SUPPLEMENTAIRE_50;
			
			coutTotalEmploye=coutTotalEmploye+coutHoraire+coutSupp25+coutSupp50;
			detailProduction.setCoutTotal(coutHoraire);
			detailProduction.setDelaiEmploye(delai);
			detailProduction.setHeureSupp25(heureSupp25);
			detailProduction.setHeureSupp50(heureSupp50);
			detailProduction.setCoutSupp25(coutSupp25);
			detailProduction.setCoutSupp50(coutSupp50);
			detailProduction.setRemise(remise);
			
			
			if(!detailProduction.getEmploye().isSalarie()){
			FicheEmploye ficheEmploye =ficheEmployeDAO.findByPeriodeDateSitutation(production.getDate(), detailProduction.getEmploye().getId());
			if(ficheEmploye!=null){
				/*Remplir fiche programme*/
				coutHoraire=coutHoraire+ficheEmploye.getCoutTotal();
				delai=delai+ficheEmploye.getDelaiEmploye();
				String numOF=ficheEmploye.getNumOF()+"-"+production.getNumOF();
				float delaiProd=ficheEmploye.getDelaiProd()+production.getNbreHeure();
		/*	ficheEmploye.setDateSituation(production.getDate());
			
			ficheEmploye.setEmploye(detailProdGen.getEmploye());;
			
			ficheEmploye.setHeureSupp25(heureSupp25);
			ficheEmploye.setHeureSupp50(heureSupp50);
			ficheEmploye.setCoutSupp25(coutSupp25);
			ficheEmploye.setCoutSupp50(coutSupp50);*/
			
			ficheEmploye.setNumOF(numOF);
			ficheEmploye.setCoutTotal(coutHoraire);
			ficheEmploye.setDelaiProd(delaiProd);
			
			ficheEmploye.setDelaiEmploye(delai);
			
			 if(detailProduction.isAbsent()==false && ficheEmploye.getDelaiEmploye()>=ficheEmploye.getDelaiProd()){
		   			
		   		 Parametre parametre_remise_ouvrier=parametreDAO.findByCode(PARAMETRE_CODE_REMISE_EQUIPE_PRODUCTION);
				 Parametre parametre_remise_ouvrier_vrac=parametreDAO.findByCode(PARAMETRE_CODE_REMISE_EQUIPE_EMBALAGE);
					
					if(detailProduction.getEmploye().getTypeResEmploye().getCode().equals(TYPE_EMPLOYE_MAIN_OUVRE_PRODUCTION))
						remise=parametre_remise_ouvrier.getValeur();
					if(detailProduction.getEmploye().getTypeResEmploye().getCode().equals(TYPE_EMPLOYE_MAIN_OUVRE_EN_VRAC))
						remise=parametre_remise_ouvrier_vrac.getValeur();
		   			
		   		}else {
		   			remise=0;
		   		}
			 ficheEmploye.setRemise(remise);
			ficheEmployeDAO.edit(ficheEmploye);
			} else{
				ficheEmploye =new FicheEmploye();
				ficheEmploye.setCoutTotal(coutHoraire);
				ficheEmploye.setNumOF(production.getNumOF());
				ficheEmploye.setDateSituation(production.getDate());
				ficheEmploye.setDelaiEmploye(delai);
				ficheEmploye.setEmploye(detailProduction.getEmploye());;
				
				ficheEmploye.setHeureSupp25(heureSupp25);
				ficheEmploye.setHeureSupp50(heureSupp50);
				ficheEmploye.setCoutSupp25(coutSupp25);
				ficheEmploye.setCoutSupp50(coutSupp50);
				
				
				 if(detailProduction.isAbsent()==false && delai>=production.getNbreHeure()){
			   			
			   		 Parametre parametre_remise_ouvrier=parametreDAO.findByCode(PARAMETRE_CODE_REMISE_EQUIPE_PRODUCTION);
					 Parametre parametre_remise_ouvrier_vrac=parametreDAO.findByCode(PARAMETRE_CODE_REMISE_EQUIPE_EMBALAGE);
						
						if(detailProduction.getEmploye().getTypeResEmploye().getCode().equals(TYPE_EMPLOYE_MAIN_OUVRE_PRODUCTION))
							remise=parametre_remise_ouvrier.getValeur();
						if(detailProduction.getEmploye().getTypeResEmploye().getCode().equals(TYPE_EMPLOYE_MAIN_OUVRE_EN_VRAC))
							remise=parametre_remise_ouvrier_vrac.getValeur();
			   			
			   		}else {
			   			remise=0;
			   		}
				 
				 ficheEmploye.setRemise(remise);
				 ficheEmploye.setDelaiProd(production.getNbreHeure());
				ficheEmployeDAO.add(ficheEmploye);
				
			}
			}
			
			listDetailProductionTmp.add(detailProduction);
		}
		}	
		return listDetailProductionTmp;
		
	}


List<DetailProdGen> calculeCoutEmployeEmbalage(List<DetailProdGen> listDetailProdGen,Map< Integer, String> mapDelaiEmployeEmabalage){
	float delai=0;
	float remise=0;
	float coutHoraire=0;
	float heureSupp25; 
	float heureSupp50; 
	
	float coutSupp25=0;
	float coutSupp50=0;
	List<DetailProdGen> listDetailDetailProdGenTmp= new ArrayList<DetailProdGen>();
	for(int i=0;i<listDetailProdGen.size();i++){
		
		DetailProdGen detailProdGen =listDetailProdGen.get(i);
		
		remise=0;
		delai=0;
		coutHoraire=0;
		heureSupp25=0;
		heureSupp50=0;
		coutSupp25=0;
		coutSupp50=0;
		
		if(!detailProdGen.getEmploye().isSalarie()){
			
			delai=Float.parseFloat(mapDelaiEmployeEmabalage.get(detailProdGen.getEmploye().getId()));
			heureSupp25=Float.parseFloat(mapHeureSupp25EmployeEmbalage.get(detailProdGen.getEmploye().getId()));
			heureSupp50=Float.parseFloat(mapHeureSupp50EmployeEmbalage.get(detailProdGen.getEmploye().getId()));
		
		if(detailProdGen.isAbsent()==true){
    		
   		 String code=Utils.genereCodeDateMoisAnnee(production.getDate());
   		 Utils.compterAbsenceEmploye(code, detailProdGen.getEmploye(), production.getDate());
   		 delai=0;
   		 heureSupp25=0;
   		 heureSupp50=0;
   	} else if( delai>=production.getNbreHeure()){
   		
   			Parametre parametre_remise_ouvrier=parametreDAO.findByCode(PARAMETRE_CODE_REMISE_EQUIPE_PRODUCTION);
		 	Parametre parametre_remise_ouvrier_vrac=parametreDAO.findByCode(PARAMETRE_CODE_REMISE_EQUIPE_EMBALAGE);
			
			if(detailProdGen.getEmploye().getTypeResEmploye().getCode().equals(TYPE_EMPLOYE_MAIN_OUVRE_PRODUCTION))
				remise=parametre_remise_ouvrier.getValeur();
			if(detailProdGen.getEmploye().getTypeResEmploye().getCode().equals(TYPE_EMPLOYE_MAIN_OUVRE_EN_VRAC))
				remise=parametre_remise_ouvrier_vrac.getValeur();
   		
   	}
		
		 
		
		coutHoraire=detailProdGen.getEmploye().getCoutHoraire()*delai;
		coutSupp25=heureSupp25*COUT_HEURE_SUPPLEMENTAIRE_25;
		coutSupp50=heureSupp50*COUT_HEURE_SUPPLEMENTAIRE_50;
		
		coutTotalEmployeEmbalage=coutTotalEmployeEmbalage+coutHoraire+coutSupp25+coutSupp50;
		detailProdGen.setCoutTotal(coutHoraire);
		detailProdGen.setDelaiEmploye(delai);
		detailProdGen.setRemise(remise);
		detailProdGen.setHeureSupp25(heureSupp25);
		detailProdGen.setHeureSupp50(heureSupp50);
		detailProdGen.setCoutSupp25(coutSupp25);
		detailProdGen.setCoutSupp50(coutSupp50);
		
		if(!detailProdGen.getEmploye().isSalarie()){
		FicheEmploye ficheEmploye =ficheEmployeDAO.findByPeriodeDateSitutation(production.getDate(), detailProdGen.getEmploye().getId());
		if(ficheEmploye!=null){
			/*Remplir fiche programme*/
			coutHoraire=coutHoraire+ficheEmploye.getCoutTotal();
			delai=delai+ficheEmploye.getDelaiEmploye();
			String numOF=ficheEmploye.getNumOF()+"-"+production.getNumOF();
			float delaiProd=ficheEmploye.getDelaiProd()+production.getNbreHeure();
	/*	ficheEmploye.setDateSituation(production.getDate());
		
		ficheEmploye.setEmploye(detailProdGen.getEmploye());;
		
		ficheEmploye.setHeureSupp25(heureSupp25);
		ficheEmploye.setHeureSupp50(heureSupp50);
		ficheEmploye.setCoutSupp25(coutSupp25);
		ficheEmploye.setCoutSupp50(coutSupp50);*/
		
		ficheEmploye.setNumOF(numOF);
		ficheEmploye.setCoutTotal(coutHoraire);
		ficheEmploye.setDelaiProd(delaiProd);
		
		ficheEmploye.setDelaiEmploye(delai);
		
		 if(detailProdGen.isAbsent()==false && ficheEmploye.getDelaiEmploye()>=ficheEmploye.getDelaiProd()){
	   			
	   		 Parametre parametre_remise_ouvrier=parametreDAO.findByCode(PARAMETRE_CODE_REMISE_EQUIPE_PRODUCTION);
			 Parametre parametre_remise_ouvrier_vrac=parametreDAO.findByCode(PARAMETRE_CODE_REMISE_EQUIPE_EMBALAGE);
				
				if(detailProdGen.getEmploye().getTypeResEmploye().getCode().equals(TYPE_EMPLOYE_MAIN_OUVRE_PRODUCTION))
					remise=parametre_remise_ouvrier.getValeur();
				if(detailProdGen.getEmploye().getTypeResEmploye().getCode().equals(TYPE_EMPLOYE_MAIN_OUVRE_EN_VRAC))
					remise=parametre_remise_ouvrier_vrac.getValeur();
	   			
	   		}else {
	   			remise=0;
	   		}
		 ficheEmploye.setRemise(remise);
		ficheEmployeDAO.edit(ficheEmploye);
		}else {
			ficheEmploye =new FicheEmploye();
			ficheEmploye.setCoutTotal(coutHoraire);
			ficheEmploye.setNumOF(production.getNumOF());
			ficheEmploye.setDateSituation(production.getDate());
			ficheEmploye.setDelaiEmploye(delai);
			ficheEmploye.setEmploye(detailProdGen.getEmploye());;
			
			ficheEmploye.setHeureSupp25(heureSupp25);
			ficheEmploye.setHeureSupp50(heureSupp50);
			ficheEmploye.setCoutSupp25(coutSupp25);
			ficheEmploye.setCoutSupp50(coutSupp50);
			
			
			 if(detailProdGen.isAbsent()==false && delai>=production.getNbreHeure()){
		   			
		   		 Parametre parametre_remise_ouvrier=parametreDAO.findByCode(PARAMETRE_CODE_REMISE_EQUIPE_PRODUCTION);
				 Parametre parametre_remise_ouvrier_vrac=parametreDAO.findByCode(PARAMETRE_CODE_REMISE_EQUIPE_EMBALAGE);
					
					if(detailProdGen.getEmploye().getTypeResEmploye().getCode().equals(TYPE_EMPLOYE_MAIN_OUVRE_PRODUCTION))
						remise=parametre_remise_ouvrier.getValeur();
					if(detailProdGen.getEmploye().getTypeResEmploye().getCode().equals(TYPE_EMPLOYE_MAIN_OUVRE_EN_VRAC))
						remise=parametre_remise_ouvrier_vrac.getValeur();
		   			
		   		}else {
		   			remise=0;
		   		}
			 
			 ficheEmploye.setRemise(remise);
			 ficheEmploye.setDelaiProd(production.getNbreHeure());
			ficheEmployeDAO.add(ficheEmploye);
			
		}
		
		}
		listDetailDetailProdGenTmp.add(detailProdGen);
	}
	}
	return listDetailDetailProdGenTmp;
	
}

boolean remplirQuantite(){
	boolean trouve=false;
	
	
	

	for(int j=0;j<table.getRowCount();j++){
		
		if(!table.getValueAt(j, 7).toString().equals("")){
			mapQuantiteDechet.put(table.getValueAt(j, 0).toString(), table.getValueAt(j, 7).toString()); 
			trouve=true;
		}else {
			mapQuantiteDechet.put(table.getValueAt(j, 0).toString(), String.valueOf(0));
		}
		if(!table.getValueAt(j, 8).toString().equals("")){
			
			mapQuantiteDechetFour.put(table.getValueAt(j, 0).toString(), table.getValueAt(j, 8).toString());
			
			trouve=true;
		}else {
			mapQuantiteDechetFour.put(table.getValueAt(j, 0).toString(),  String.valueOf(0));
		}
		if(!table.getValueAt(j, 9).toString().equals("")){
			
			mapQuantiteManquante.put(table.getValueAt(j, 0).toString(), table.getValueAt(j, 9).toString());
			trouve=true;
		}else {
			mapQuantiteManquante.put(table.getValueAt(j, 0).toString(),  String.valueOf(0));
		}
		
		if(!table.getValueAt(j, 10).toString().equals("")){
			
			mapQuantiteOffre.put(table.getValueAt(j, 0).toString(), table.getValueAt(j, 10).toString());
			trouve=true;
		}else {
			mapQuantiteOffre.put(table.getValueAt(j, 0).toString(),  String.valueOf(0));
		}
		
		if(!table.getValueAt(j, 11).toString().equals("")){
			
			mapQuantiteReste.put(table.getValueAt(j, 0).toString(), table.getValueAt(j, 11).toString());
			trouve=true;
		}else {
			mapQuantiteReste.put(table.getValueAt(j, 0).toString(),  String.valueOf(0));
		}
		
	}
	return trouve;
}
List<CoutMP> validerSaisiQuantiteDechetReste(List<CoutMP> listCoutMP) {
	
	float quantiteDechet=0;
	float quantiteReste=0;
	float quantiteDechetFour=0;
	float quantiteManquante=0;
	float quantiteOffre=0;
	
	List<CoutMP> listCoutMPTmp=new ArrayList<CoutMP>();
	
for(int i=0;i<listCoutMP.size();i++){ 
		
		CoutMP coutMP=listCoutMP.get(i);
		
		quantiteDechet=Float.parseFloat(mapQuantiteDechet.get(coutMP.getMatierePremier().getCode()));
		quantiteReste=Float.parseFloat(mapQuantiteReste.get(coutMP.getMatierePremier().getCode()));
		quantiteDechetFour=Float.parseFloat(mapQuantiteDechetFour.get(coutMP.getMatierePremier().getCode()));
		quantiteManquante=Float.parseFloat(mapQuantiteManquante.get(coutMP.getMatierePremier().getCode()));
		quantiteOffre=Float.parseFloat(mapQuantiteOffre.get(coutMP.getMatierePremier().getCode()));
		
		coutMP.setQuantDechet(quantiteDechet);
		coutMP.setQuantReste(quantiteReste);
		coutMP.setQuantDechetFournisseur(quantiteDechetFour);
		coutMP.setQuantiteManquante(quantiteManquante);
		coutMP.setQuantiteOffre(quantiteOffre);
		
		//listCoutMP.set(i,coutMP);
		listCoutMPTmp.add(coutMP);
}
afficher_tableMP(listCoutMPTmp);

validerSaisie=true;
return listCoutMPTmp;
	
}

List<CoutMP>  calculeCoutMatierePremiere(List<CoutMP> listCoutMP){
	float quantiteDechet=0;
	float quantiteConsomme=0;
	float quantiteReste=0;
	float quantiteMP=0;
	
	float quantiteDechetFour=0;
	float quantiteManquante=0;
	float quantiteOffre=0;
	
	float prixUnitaire=0;
	float prixMP=0;
	float coutDechet=0;
	float coutDechetFour=0;
	float coutManquante=0;
	float coutQuantiteOffre=0;
	
	List<CoutMP> listCoutMPTmp=new ArrayList<CoutMP>();
	for(int i=0;i<listCoutMP.size();i++){ 
		
		CoutMP coutMP=listCoutMP.get(i);
		prixUnitaire=coutMP.getPrixUnitaire();
		StockMP stockmp=stockMPDAO.findStockByMagasinMP(coutMP.getMatierePremier().getId(), production.getMagasinProd().getId());
		
		//quantiteConsomme=Integer.parseInt(mapQuantiteConsomme.get(coutMP.getMatierePremier().getCode()));
		quantiteConsomme=coutMP.getQuantConsomme();
		quantiteDechet=Float.parseFloat(mapQuantiteDechet.get(coutMP.getMatierePremier().getCode()));
		quantiteReste=Float.parseFloat(mapQuantiteReste.get(coutMP.getMatierePremier().getCode()));
		quantiteDechetFour=Float.parseFloat(mapQuantiteDechetFour.get(coutMP.getMatierePremier().getCode()));
		quantiteManquante=Float.parseFloat(mapQuantiteManquante.get(coutMP.getMatierePremier().getCode()));
		quantiteOffre=Float.parseFloat(mapQuantiteOffre.get(coutMP.getMatierePremier().getCode()));
		
		//quantiteReste=stockmp.getStock()-(quantiteConsomme+quantiteDechet);
		coutMP.setQuantConsomme(quantiteConsomme);
		coutMP.setQuantDechet(quantiteDechet);
		//quantiteMP=quantiteConsomme+coutMP.getQuantChargeSupp();
		prixMP=quantiteConsomme*prixUnitaire;
		coutDechet=quantiteDechet*prixUnitaire;
		coutDechetFour=quantiteDechetFour*prixUnitaire;
		coutManquante=quantiteManquante*prixUnitaire;
		coutQuantiteOffre=quantiteOffre*prixUnitaire;
		
		coutMP.setPrixTotal(prixMP);
		coutMP.setCoutDechet(coutDechet);
		coutMP.setCoutDechetFournisseur(coutDechetFour);
		coutMP.setCoutManquante(coutManquante);
		coutMP.setCoutOffre(coutQuantiteOffre);
		
		coutTotalMP=coutTotalMP+prixMP;
		coutTotalDechet=coutTotalDechet+coutDechet+coutDechetFour+coutManquante;
		//quantiteReste=stockmp.getStock()-quantiteConsomme;
		
		quantiteMP=stockmp.getStock()-(quantiteConsomme+quantiteDechet+quantiteReste+quantiteDechetFour+quantiteManquante+quantiteOffre);
		
		if(quantiteMP!=0){
			
			 Calendar cal = Calendar.getInstance();
		     cal.setTime(production.getDate());
		     int  annee = cal.get(Calendar.YEAR);
		     int mois = cal.get(Calendar.MONTH)+1;
		     
		
		CompteStockMP compteStockMP =compteStockMPDAO.findByCodeMPAnneeMois(coutMP.getMatierePremier().getCode(),mois,annee);
		stockmp.setStock(0);
		if(compteStockMP==null) {
			compteStockMP=new CompteStockMP();
			compteStockMP.setMatierePremier(coutMP.getMatierePremier());
			compteStockMP.setPrixUnitaire(coutMP.getPrixUnitaire());
			compteStockMP.setQuantite(quantiteMP);
			compteStockMP.setMois(mois);
			compteStockMP.setAnnee(annee);
			compteStockMPDAO.add(compteStockMP);
			
		}else {
			
			float quantite =compteStockMP.getQuantite()+quantiteMP;
		//	float coutTotal =(compteStockMP.getQuantite()*compteStockMP.getPrixUnitaire())+(quantiteMP*coutMP.getPrixUnitaire());
			
			//float prixUnitaire=coutTotal/Math.abs(quantite);
			
			
			compteStockMP.setQuantite(quantite);
		//	compteStockMP.setPrixUnitaire(prixUnitaire);
			
			compteStockMPDAO.edit(compteStockMP);
			
			
		}
	}
		stockmp.setStock(quantiteReste);
		stockMPDAO.edit(stockmp);
	}
	return listCoutMPTmp;
  }
void afficherDetailPorduction(List<DetailEstimation> lisDetailEstimation,List<CoutMP> listCoutMP){
	DetailEstimation detailEstimation=new DetailEstimation();
	CoutMP coutMP=new CoutMP();
	CoutMP coutMPTmp=new CoutMP();
	int position=-1;
	float quantiteConsommme=0;
	float quantiteRealise=Float.parseFloat(txtQuantiteRealise.getText());
	boolean trouve =false;
	int priorite=0;
	float quantiteTotalCharge=0;
	
	for(int i=0;i<lisDetailEstimation.size();i++){
		trouve =false;
		detailEstimation=lisDetailEstimation.get(i);
		for(int j=0;j<listCoutMP.size();j++){
			coutMP=listCoutMP.get(j);
			
			if(detailEstimation.getMatierePremier().getId()==coutMP.getMatierePremier().getId()){
				if(detailEstimation.getPriorite()==0){
					
				quantiteConsommme=detailEstimation.getQuantite()*Float.parseFloat(txtQuantiteRealise.getText());
				
				if(detailEstimation.getMatierePremier().getCategorieMp().getSubCategorieMp().getCode().equals(SOUS_CATEGORIE_MATIERE_PREMIERE_CARTON)){
					
					quantiteConsommme=(float) Math.floor(quantiteConsommme);
						
					} 
				
				coutMP.setQuantConsomme(quantiteConsommme);
				listCoutMP.set(j,coutMP);
				}else if(detailEstimation.getPriorite()>0){
					
					for(int k=0;k<listCoutMP.size();k++){
					if(detailEstimation.getPriorite()==k){
						quantiteTotalCharge=coutMP.getQuantCharge()+coutMP.getQuantExistante();
						if(quantiteRealise<=quantiteTotalCharge){
							coutMP.setQuantConsomme(quantiteRealise);
							listCoutMP.set(j,coutMP);
							quantiteRealise=0;
							
						}else {
						
							if(priorite<detailEstimation.getPriorite()){
								priorite=detailEstimation.getPriorite();
								position=j;
							}
							quantiteTotalCharge=coutMP.getQuantCharge()+coutMP.getQuantExistante();
							coutMP.setQuantConsomme(quantiteTotalCharge);
							listCoutMP.set(j,coutMP);
							quantiteRealise=quantiteRealise-quantiteTotalCharge;
							
						}
						}
					}
				}
				
			}else {
				/*if(detailEstimation.getPriorite()>0 && trouve==false){
					k++;
					trouve=true;*/
				//coutMP.setQuantConsomme(Float.parseFloat(txtQuantiteRealise.getText()));
				}
			}
			
		}
	
	if(quantiteRealise>0){
		
			coutMP=listCoutMP.get(position);
			float quantite=coutMP.getQuantConsomme()+quantiteRealise;
			coutMP.setQuantConsomme(quantite);
			listCoutMP.set(position, coutMP);
		
	}
		
	}






void calculerStockCoutProduitFini(float coutTotal){
	
	float coutPF=0;
	float nouveauCout=0;
	float quantiteTotal=0 ;
	float coutStock=0;
	
	
	//coutTotal=production.getCoutTotalEmploye()+production.getCoutTotalEmployeGen()+production.getCoutTotalMP()+production.getCoutTotalEmployeEmbalage();
	
	coutPF=coutTotal/production.getQuantiteReel();
	
	 StockPF stockPF = stockPFDAO.findStockByMagasinPF(production.getArticles().getId(),production.getMagasinPF().getId());
	 
	 quantiteTotal=stockPF.getStock()+production.getQuantiteReel();
	 coutStock=stockPF.getStock()*stockPF.getPrixUnitaire();
	 
	 	if(coutStock>0)
	 		nouveauCout=(coutTotal+coutStock)/quantiteTotal;
	 	else 
	 		nouveauCout= coutPF;
	 	
	 	
	 stockPF.setArticles(production.getArticles());
	 stockPF.setPrixUnitaire(nouveauCout);
	 stockPF.setStock(quantiteTotal);
	 
	
	 DetailTransferProduitFini detailTransferProduitFini =new DetailTransferProduitFini();
	 TransferStockPF transferStockPF =new TransferStockPF();
	 List<DetailTransferProduitFini> listeDetailTransferProduitFini=new ArrayList<DetailTransferProduitFini>();
	
	 
	detailTransferProduitFini.setArticle(production.getArticles());
	detailTransferProduitFini.setDateTransfer(new Date());
	detailTransferProduitFini.setMagasinDestination(stockPF.getMagasin());
	detailTransferProduitFini.setMagasinSouce(production.getMagasinProd());
	detailTransferProduitFini.setQuantite(production.getQuantiteReel());
	detailTransferProduitFini.setPrixUnitaire(coutPF);
	detailTransferProduitFini.setTypeTransfer(Constantes.TYPE_TRANSFER_PRODUIT_FINI_ENTRE);
	detailTransferProduitFini.setTransferStockPF(transferStockPF);
	
	 listeDetailTransferProduitFini.add(detailTransferProduitFini);
	 
	 transferStockPF.setCodeTransfer(production.getNumOF());
	 transferStockPF.setCreerPar(AuthentificationView.utilisateur);
	 transferStockPF.setDate(new Date());
	 transferStockPF.setDateTransfer(new Date());
	 transferStockPF.setListDetailTransferProduitFini(listeDetailTransferProduitFini);
	 transferStockPF.setStatut(STATUT_TRANSFER_PRODUIT_FINI_ENTRE);
	 
	
	stockPFDAO.edit(stockPF);
	transferStockPFDAO.add(transferStockPF);
}

float determinerRemiseEmploye(Equipe equipe){
	float remiseEmploye = 0;
	float quantiteTounage=0; 
	Articles article=production.getArticles();
	
	if(delaiTotal!=0){
		if(article.getConditionnement()==2){ 
			Parametre parametre = parametreDAO.findByCode(PARAMETRE_CODE_QUANTITE_TOUNAGE_500G);
			quantiteTounage=parametre.getValeur();
		}
		if(article.getConditionnement()==5){ 
			Parametre parametre = parametreDAO.findByCode(PARAMETRE_CODE_QUANTITE_TOUNAGE_200G);
			quantiteTounage=parametre.getValeur();
		}
		if(article.getConditionnement()==10){ 
			Parametre parametre = parametreDAO.findByCode(PARAMETRE_CODE_QUANTITE_TOUNAGE_100G);
			quantiteTounage=parametre.getValeur();
		}
	
	if(production.getQuantiteReel()>=quantiteTounage)
		remiseEmploye=equipe.getRemise()/delaiTotal;
	}
	
	return remiseEmploye;
	
}

float determinerRemiseEmployeEmbalage(Equipe equipe){
	float remiseEmploye = 0;
	float quantiteTounage=0; 
	Articles article=production.getArticles();
	if(delaiTotalEquipeEmbalage!=0){
		if(article.getConditionnement()==2){ 
			Parametre parametre = parametreDAO.findByCode(PARAMETRE_CODE_QUANTITE_TOUNAGE_500G);
			quantiteTounage=parametre.getValeur();
		}
		if(article.getConditionnement()==5){ 
			Parametre parametre = parametreDAO.findByCode(PARAMETRE_CODE_QUANTITE_TOUNAGE_200G);
			quantiteTounage=parametre.getValeur();
		}
		if(article.getConditionnement()==10){ 
			Parametre parametre = parametreDAO.findByCode(PARAMETRE_CODE_QUANTITE_TOUNAGE_100G);
			quantiteTounage=parametre.getValeur();
		}
			
		if(production.getQuantiteReel()>=quantiteTounage)
			remiseEmploye=equipe.getRemise()/delaiTotalEquipeEmbalage;
	}
	
	return remiseEmploye;
	
}

void calculRemiseResponsableProduction(Date dateProd, String periode){
	float quantiteTounage=0; 
	float coutResponsableProd=0;
	float remise=0;
	
	coutTotalAutreEmploye=0;

	 List<Production> listeProduction =productionDAO.listeProductionByDateByPeriode(dateProd,periode);
	 int taileListeProduction=listeProduction.size();
	 List<DetailResponsableProd> listeDetailResponsableProdTmp = new ArrayList<DetailResponsableProd>();
	
	 

	//	 if(production.getStatut().equals(ETAT_OF_TERMINER) ){
			 List<DetailResponsableProd> listeDetailResponsableProd =production.getListDetailResponsableProd();
			 
			 
			 for(int j=0;j<listeDetailResponsableProd.size();j++){

				 DetailResponsableProd detailResponsableProd=listeDetailResponsableProd.get(j);
				 
				 Employe employe=detailResponsableProd.getEmploye();
				 remise=0;
				 
				

				 if(!employe.isSalarie()){
					 
					 if(detailResponsableProd.isAbsent()==true){
				    		
				   		 String code=Utils.genereCodeDateMoisAnnee(production.getDate());
							 
				   		 Utils.compterAbsenceEmploye(code, detailResponsableProd.getEmploye(), production.getDate());
				   		}else if( detailResponsableProd.getDelaiEmploye()>=production.getNbreHeure()){
				   			
				   		 Parametre parametre_remise_ouvrier=parametreDAO.findByCode(PARAMETRE_CODE_REMISE_EQUIPE_PRODUCTION);
						 Parametre parametre_remise_ouvrier_vrac=parametreDAO.findByCode(PARAMETRE_CODE_REMISE_EQUIPE_EMBALAGE);
							
							if(detailResponsableProd.getEmploye().getTypeResEmploye().getCode().equals(TYPE_EMPLOYE_MAIN_OUVRE_PRODUCTION))
								remise=parametre_remise_ouvrier.getValeur();
							if(detailResponsableProd.getEmploye().getTypeResEmploye().getCode().equals(TYPE_EMPLOYE_MAIN_OUVRE_EN_VRAC))
								remise=parametre_remise_ouvrier_vrac.getValeur();
				   			
				   		}
					 
					
						
					//	coutTotalAutreEmploye=coutTotalAutreEmploye+detailResponsableProd.getCoutTotal()+detailResponsableProd.getCoutSupp25()+detailResponsableProd.getCoutSupp50();
						
						float coutTotal=detailResponsableProd.getEmploye().getCoutHoraire()*detailResponsableProd.getDelaiEmploye();
						
							FicheEmploye ficheEmploye=ficheEmployeDAO.findByPeriodeDateSitutation(production.getDate(), detailResponsableProd.getEmploye().getId());
							
							if(ficheEmploye!=null){
								
								
								ficheEmploye.setCoutTotal(coutTotal);
								ficheEmploye.setNumOF(production.getNumOF());
								ficheEmploye.setDateSituation(production.getDate());
								ficheEmploye.setDelaiEmploye(detailResponsableProd.getDelaiEmploye());
								ficheEmploye.setHeureSupp25(detailResponsableProd.getHeureSupp25());
								ficheEmploye.setHeureSupp50(detailResponsableProd.getHeureSupp50());
								ficheEmploye.setCoutSupp25(detailResponsableProd.getCoutSupp25());
								ficheEmploye.setCoutSupp50(detailResponsableProd.getCoutSupp50());
								ficheEmploye.setRemise(remise);
								ficheEmploye.setEmploye(detailResponsableProd.getEmploye());
								
						
								ficheEmployeDAO.edit(ficheEmploye);
								}else {
									 ficheEmploye=new FicheEmploye();
									
									ficheEmploye.setCoutTotal(coutTotal);
									ficheEmploye.setNumOF(production.getNumOF());
									ficheEmploye.setDateSituation(production.getDate());
									ficheEmploye.setDelaiEmploye(detailResponsableProd.getDelaiEmploye());
									ficheEmploye.setHeureSupp25(detailResponsableProd.getHeureSupp25());
									ficheEmploye.setHeureSupp50(detailResponsableProd.getHeureSupp50());
									ficheEmploye.setCoutSupp25(detailResponsableProd.getCoutSupp25());
									ficheEmploye.setCoutSupp50(detailResponsableProd.getCoutSupp50());
									ficheEmploye.setRemise(remise);
									ficheEmploye.setEmploye(detailResponsableProd.getEmploye());
									
									ficheEmployeDAO.add(ficheEmploye);
									
								}
						listeDetailResponsableProdTmp.add(detailResponsableProd);
						
				 }
				 
				}
			 
			 
			 /*#############################################
			  Metter à jour les délais des employés Génériques
			   ###########################################*/
			 majDelaiEmployeGenerique(listeProduction);
			 /*###########################################*/
				 
			// }
	
//	return listeDetailResponsableProdTmp;
}

void initialiserTableauEmploye(){
	modeleEmploye =new DefaultTableModel(
		     	new Object[][] {
		     	},
		     	new String[] {
		     			"ID","Matricule","Nom", "Délai Travaillé", "H Supp 25%", "H Supp 50%", "Absent"
		     	}
		     ) {
     	boolean[] columnEditables = new boolean[] {
     			false,false,false,true,true,true,true
     	};
    
     	Class[] columnTypes = new Class[] {
     			String.class,String.class,String.class,Float.class,Float.class,Float.class, Boolean.class
			};
      	
	       public Class getColumnClass(int columnIndex) {
					return columnTypes[columnIndex];
				}
     	public boolean isCellEditable(int row, int column) {
     		return columnEditables[column];
     	}
     };
		   tableEmploye.setModel(modeleEmploye); 
		   tableEmploye.getColumnModel().getColumn(0).setPreferredWidth(1);
		   tableEmploye.getColumnModel().getColumn(1).setPreferredWidth(60);
		   tableEmploye.getColumnModel().getColumn(2).setPreferredWidth(160);
		   tableEmploye.getColumnModel().getColumn(3).setPreferredWidth(60);
		   tableEmploye.getColumnModel().getColumn(4).setPreferredWidth(60);
		   tableEmploye.getColumnModel().getColumn(5).setPreferredWidth(60);
		   tableEmploye.getColumnModel().getColumn(5).setPreferredWidth(60);
}

void initialiserTableauEmployeGen(){
	modeleEquipeGen =new DefaultTableModel(
		     	new Object[][] {
		     	},
		     	new String[] {
		     			"ID","Matricule","Nom", "Délai Travaillé", "H Supp 25%", "H Supp 50%", "Absent"
		     	}
		     ) {
     	boolean[] columnEditables = new boolean[] {
     			false,false,false,true,true,true,true
     	};
    
     	Class[] columnTypes = new Class[] {
     			String.class,String.class,String.class,Float.class,Float.class,Float.class, Boolean.class
			};
      	
	       public Class getColumnClass(int columnIndex) {
					return columnTypes[columnIndex];
				}
     	public boolean isCellEditable(int row, int column) {
     		return columnEditables[column];
     	}
     };
		   tableEmployeGen.setModel(modeleEquipeGen); 
		   tableEmployeGen.getColumnModel().getColumn(0).setPreferredWidth(1);
		   tableEmployeGen.getColumnModel().getColumn(1).setPreferredWidth(60);
		   tableEmployeGen.getColumnModel().getColumn(2).setPreferredWidth(160);
		   tableEmployeGen.getColumnModel().getColumn(3).setPreferredWidth(60);
		   tableEmployeGen.getColumnModel().getColumn(4).setPreferredWidth(60);
		   tableEmployeGen.getColumnModel().getColumn(5).setPreferredWidth(60);
		   tableEmployeGen.getColumnModel().getColumn(5).setPreferredWidth(60);
}

void initialiserTableauEquipeEmbalage(){
	
	modeleEquipeEm =new DefaultTableModel(
		     	new Object[][] {
		     	},
		     	new String[] {
		     			"ID","Matricule","Nom","Délai Travaillé", "H Supp 25%", "H Supp 50%", "Absent"
		     	}
		     ) {
     	boolean[] columnEditables = new boolean[] {
     			false,false,false,true,true,true,true
     	};
    
     	Class[] columnTypes = new Class[] {
     			String.class,String.class,String.class,Float.class,Float.class,Float.class, Boolean.class
			};
      	
	       public Class getColumnClass(int columnIndex) {
					return columnTypes[columnIndex];
				}
     	public boolean isCellEditable(int row, int column) {
     		return columnEditables[column];
     	}
     };
		     
		     
		     table_1.setModel(modeleEquipeEm); 
		     table_1.getColumnModel().getColumn(0).setPreferredWidth(1);
		     table_1.getColumnModel().getColumn(1).setPreferredWidth(60);
		     table_1.getColumnModel().getColumn(2).setPreferredWidth(160);
		     table_1.getColumnModel().getColumn(3).setPreferredWidth(60);
		     table_1.getColumnModel().getColumn(4).setPreferredWidth(60);
		     table_1.getColumnModel().getColumn(5).setPreferredWidth(60);
		     table_1.getColumnModel().getColumn(5).setPreferredWidth(60);
	
}

List<DetailProdGen> remplieDetailProdGen(List<Employe> listEmploye){
	List<DetailProdGen> listDetailProdGen=new ArrayList<DetailProdGen>();
	for(int i=0;i<listEmploye.size();i++){
		DetailProdGen detailProdGen= new DetailProdGen();
		Employe employe =listEmploye.get(i);
		detailProdGen.setCoutTotal(0);
		detailProdGen.setRemise(employe.getRemise());
		detailProdGen.setEmploye(employe);
		detailProdGen.setProductionGen(production);
		
		listDetailProdGen.add(detailProdGen);
	}
	
	production.setListDetailProdGen(listDetailProdGen);
	productionDAO.edit(production);
	return listDetailProdGen;
  }

List<DetailProduction>  remplieDetailProdcution(List<Employe> listEmploye){
	List<DetailProduction> listDetailProdcution=new ArrayList<DetailProduction>();

	
	for(int i=0;i<listEmploye.size();i++){
		DetailProduction detailProd= new DetailProduction();
		Employe employe =listEmploye.get(i);
		detailProd.setCoutTotal(0);
		detailProd.setRemise(employe.getRemise());
		detailProd.setEmploye(employe);
		detailProd.setProduction(production);
		
		//listDetailProdcution.add(detailProd);
		production.getDetailProductions().add(detailProd);
	}
//	production.setDetailProductions(listDetailProdcution);
	
	
/*	List<DetailProduction> listDetailProdcutionTmp=production.getDetailProductions();
	DetailProduction detailProdDeleted=new DetailProduction();
	if(listDetailProdcutionTmp!=null && listDetailProdcutionTmp.size()>0){
	for(int j=0;j<listDetailProdcutionTmp.size();j++){
		DetailProduction detailProd= listDetailProdcutionTmp.get(j);
		if(!listEmploye.contains(detailProd.getEmploye())){
			detailProdDeleted=production.removeDetailProduction(detailProd);
			System.out.println("######"+detailProdDeleted.getId());
		}
	}
	
	}*/
	productionDAO.edit(production);
	
	return production.getDetailProductions();
  }


void  annulerStockMatierePremiere(List<CoutMP> listCoutMP,int idMagasinProd,int idMagasinStockage){
	float quantiteStockage=0;
	float quantiteCharge=0;
	float quantiteStockmp=0;
	float quantiteARetournerCompteMP=0;
	for(int i=0;i<listCoutMP.size();i++){ 
		quantiteStockage=0;
		CoutMP coutMP=listCoutMP.get(i);
	
		
		 quantiteCharge=coutMP.getQuantCharge();
		 float quantiteConsomme=coutMP.getQuantConsomme();
		 float quantitechargeSupp=coutMP.getQuantChargeSupp();
		 float quantiteExistante=coutMP.getQuantExistante();
		 float quantiteDechet=coutMP.getQuantDechet();
		 float quantiteDechetFour=coutMP.getQuantDechetFournisseur();
		 float quantiteManquante=coutMP.getQuantiteManquante();
		 float quantiteOffre=coutMP.getQuantiteOffre();
		 float quantiteReste=coutMP.getQuantReste();
		 
		StockMP stockMPProd=stockMPDAO.findStockByMagasinMP(coutMP.getMatierePremier().getId(),idMagasinProd );
		StockMP stockMPStockage=stockMPDAO.findStockByMagasinMP(coutMP.getMatierePremier().getId(),idMagasinStockage );
		quantiteStockmp=quantiteExistante+stockMPProd.getStock();
		
		quantiteStockage=stockMPStockage.getStock()+quantiteCharge;
		 
		float ecart=(quantiteCharge+quantitechargeSupp+quantiteExistante)-(quantiteConsomme+quantiteDechet+quantiteDechetFour+quantiteManquante+quantiteOffre+quantiteReste);

			 Calendar cal = Calendar.getInstance();
		     cal.setTime(production.getDate());
		     int  annee = cal.get(Calendar.YEAR);
		     int mois = cal.get(Calendar.MONTH)+1;
		     
		
		CompteStockMP compteStockMP =compteStockMPDAO.findByCodeMPAnneeMois(coutMP.getMatierePremier().getCode(),mois,annee);
		
		if(compteStockMP!=null){
			quantiteARetournerCompteMP=compteStockMP.getQuantite()- ecart;
			compteStockMP.setQuantite(quantiteARetournerCompteMP);
			compteStockMPDAO.edit(compteStockMP);
		}
		
		stockMPProd.setStock(quantiteStockmp);
		stockMPStockage.setStock(quantiteStockage);
		
		
		/*coutMP.setCoutDechet(0);
		coutMP.setQuantCharge(0);
		coutMP.setQuantChargeSupp(0);
		coutMP.setQuantConsomme(0);
		coutMP.setQuantDechet(0);
		coutMP.setQuantExistante(0);
		coutMP.setQuantite(0);
		coutMP.setQuantReste(0);
		coutMP.setQuantDechetFournisseur(0);
		coutMP.setQuantiteManquante(0);
		cou*/
		listCoutMP.set(i, coutMP);
	//	listCoutMP.remove(i);

		stockMPDAO.edit(stockMPStockage);
		stockMPDAO.edit(stockMPProd);
		
		
	}
	
	//production.setListCoutMP(listCoutMP);
  }
void  annulerStockProduitFini(){
	float quantiteAannuler=0;
	float quantite=0;
	
			StockPF stockPF = stockPFDAO.findStockByMagasinPF(production.getArticles().getId(),production.getMagasinPF().getId());
			TransferStockPF transferStockPF=transferStockPFDAO.findByCodeTransfert(production.getNumOF());
			quantiteAannuler=production.getQuantiteReel();
			quantite=stockPF.getStock()-quantiteAannuler;

			stockPF.setStock(quantite);

			transferStockPFDAO.deleteObject(transferStockPF);

			stockPFDAO.edit(stockPF);

}

void deleteListeObject(List<FicheEmploye> listFicheEmploye){
	
	for(int i=0;i<listFicheEmploye.size();i++){
		FicheEmploye ficheEmploye=listFicheEmploye.get(i);
		ficheEmployeDAO.deleteObject(ficheEmploye);
	}
}



void majDelaiEmployeGenerique(List<Production> listeProduction){
	
	// List<Production> listeProduction =productionDAO.listeProductionByDateByPeriode(dateProd,periode);
	 float coutResponsableProd=0;
	 float delaiEmploye=0;
	 float coutHeure25=0;
	 float delaiHeure25=0;
	 float coutHeure50=0;
	 float delaiHeure50=0;
	 float coutTotalEmployeGen=0;
	 float remise=0;
	 float coutTotal=0;
	 
	 int compteur=1;
for(int i=0;i<listeProduction.size();i++){
	coutTotalEmployeGen=0;
		 Production production =listeProduction.get(i);
		 if(production.getStatut().equals(ETAT_OF_TERMINER) ){
			 List<DetailResponsableProd> listeDetailResponsableProd =production.getListDetailResponsableProd();
			 
			 
			 for(int j=0;j<listeDetailResponsableProd.size();j++){

				 DetailResponsableProd detailResponsableProd=listeDetailResponsableProd.get(j);
				 
				 if(!detailResponsableProd.getEmploye().isSalarie()){
				 
				 Employe employe=detailResponsableProd.getEmploye();
				 FicheEmploye ficheEmploye=ficheEmployeDAO.findByPeriodeDateSitutation(production.getDate(), detailResponsableProd.getEmploye().getId());
				 
				 CompteurEmployeProd compteurEmployeProd=compteurEmployeProdDAO.findByDateProdPeriode(production.getDate(),production.getPeriode(), employe.getId());
				 
				 if(compteurEmployeProd!=null)
				  compteur=compteurEmployeProd.getCompteur();
				 else 
					 compteur=1;
				 if(ficheEmploye!=null){
					 
					 coutResponsableProd=ficheEmploye.getCoutTotal()/compteur;
					 delaiEmploye=ficheEmploye.getDelaiEmploye()/compteur;
					 coutHeure25=ficheEmploye.getCoutSupp25()/compteur;
					 delaiHeure25=ficheEmploye.getHeureSupp25()/compteur;
					 coutHeure50=ficheEmploye.getCoutSupp50()/compteur;
					 delaiHeure50=ficheEmploye.getHeureSupp50()/compteur;
					 remise=ficheEmploye.getRemise()/compteur;
					 
					 detailResponsableProd.setCoutTotal(coutResponsableProd);
					 detailResponsableProd.setDelaiEmploye(delaiEmploye);
					 detailResponsableProd.setCoutSupp25(coutHeure25);
					 detailResponsableProd.setHeureSupp25(delaiHeure25);
					 detailResponsableProd.setHeureSupp50(delaiHeure50);
					 detailResponsableProd.setCoutSupp50(coutHeure50);
					 detailResponsableProd.setRemise(remise);
					 
					 coutTotalEmployeGen=coutTotalEmployeGen+coutResponsableProd+coutHeure25+coutHeure50;
				 }
				 
				
				 
				 listeDetailResponsableProd.set(j, detailResponsableProd);
				 }
				 
			 }
			 
			 coutTotal=production.getCoutTotalMP()+ production.getCoutDechet()+production.getCoutTotalEmploye()+production.getCoutTotalEmployeEmbalage()+coutTotalEmployeGen ;
			 
			 production.setListDetailResponsableProd(listeDetailResponsableProd);
			 production.setCoutTotalEmployeGen(coutTotalEmployeGen);
			 production.setCoutTotal(coutTotal);
			 productionDAO.edit(production);
				 
			 }
		
	
		}
	}
}
