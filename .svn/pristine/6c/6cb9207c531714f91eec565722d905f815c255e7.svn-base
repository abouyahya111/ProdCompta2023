package Production;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.EtchedBorder;
import javax.swing.table.DefaultTableModel;

import main.AuthentificationView;
import main.ProdLauncher;

import org.jdesktop.swingx.JXTable;
import org.jdesktop.swingx.JXTitledSeparator;
import org.jdesktop.swingx.decorator.HighlighterFactory;

import util.Constantes;
import util.JasperUtils;
import dao.daoImplManager.ChargeProductionDAOImpl;
import dao.daoImplManager.ChargesDAOImpl;
import dao.daoManager.ChargeProductionDAO;
import dao.daoManager.ChargesDAO;
import dao.daoManager.CompteurProductionDAO;
import dao.daoManager.ProductionDAO;
import dao.daoManager.StockMPDAO;
import dao.entity.ChargeProduction;
import dao.entity.Charges;
import dao.entity.CompteurProduction;
import dao.entity.CoutMP;
import dao.entity.DetailChargeFixe;

import dao.entity.DetailResponsableProd;
import dao.entity.Employe;
import dao.entity.Production;
import dao.entity.StockMP;
import dao.entity.Utilisateur;

import javax.swing.JFormattedTextField;

import com.toedter.calendar.JDateChooser;

import java.util.Locale;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.InputMethodEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;


public class AjoutChargeFixeProd extends JLayeredPane implements Constantes{
	public JLayeredPane contentPane;	
	
	private DefaultTableModel	 modeleChargefixe;

	private JXTable  tablechargefixe = new JXTable();
	private List<DetailChargeFixe> listDetailChargeFixe =new ArrayList<DetailChargeFixe>();

	
	private ImageIcon imgModifierr;
	private ImageIcon imgSupprimer;
	private ImageIcon imgAjouter;
	private ImageIcon imgInit;
	private ImageIcon imgValider;
	
	
	private JButton btnChercherOF;
	private JButton btnImprimer;
	private JButton btnInitialiser;
	private JButton btnAjouter;
	private JButton btnRechercher;
	private Utilisateur utilisateur;
	
	private JTextField txtlibelle;
	
	private JLabel Date;
	private JTextField txtMontant;
	private JTextField txtcodegenerer;
	private ChargesDAO chargedao=new ChargesDAOImpl();
	private ChargeProductionDAO chargeproductiondao;
	private JTextField txtcodecharge;
	ChargeProduction chargeproduction;
	/**
	 * Launch the application.
	 */

	/**
	 * Create the application.
	 */
	public AjoutChargeFixeProd() {
		setOpaque(true);
		setBackground(new Color(248, 248, 255));
		setForeground(new Color(248, 248, 255));

		final Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds(0, 0, 1284, 624);
      
	
        try{
        	
        
             imgAjouter = new ImageIcon(this.getClass().getResource("/img/ajout.png"));
        	 imgModifierr= new ImageIcon(this.getClass().getResource("/img/modifier.png"));
             imgSupprimer= new ImageIcon(this.getClass().getResource("/img/supp1.png"));
             imgInit= new ImageIcon(this.getClass().getResource("/img/init.png"));
             imgValider= new ImageIcon(this.getClass().getResource("/img/ajout.png"));
             chargeproduction=new ChargeProduction();
             chargeproductiondao=ProdLauncher.chargeproductiondao;
            
          } catch (Exception exp){exp.printStackTrace();}
        tablechargefixe.addMouseListener(new MouseAdapter() {
       	@Override
       	public void mouseClicked(MouseEvent arg0) {
       		txtcodecharge.setText(tablechargefixe.getValueAt(tablechargefixe.getSelectedRow(), 0).toString());
       		txtlibelle.setText(tablechargefixe.getValueAt(tablechargefixe.getSelectedRow(), 1).toString());
       		txtMontant.setText(tablechargefixe.getValueAt(tablechargefixe.getSelectedRow(), 2).toString());
       		btnAjouter.setEnabled(false);
       		 	}
       });
        
       tablechargefixe.setModel(new DefaultTableModel(
				  		   	new Object[][] {
				  		   	},
				  		   	new String[] {
				  		   		"Code", "Designation", "Montant"
				  		   	}
				  		   ));
				  		
       tablechargefixe.setShowVerticalLines(false);
       tablechargefixe.setSelectionBackground(new Color(51, 204, 255));
       tablechargefixe.setRowHeightEnabled(true);
       tablechargefixe.setBackground(new Color(255, 255, 255));
       tablechargefixe.setHighlighters(HighlighterFactory.createSimpleStriping());
       tablechargefixe.setColumnControlVisible(true);
       tablechargefixe.setForeground(Color.BLACK);
       tablechargefixe.setGridColor(new Color(0, 0, 255));
       tablechargefixe.setAutoCreateRowSorter(true);
       tablechargefixe.setBounds(2, 27, 411, 198);
       tablechargefixe.setRowHeight(20);
				  		     	
				  		     	JScrollPane scrollPane = new JScrollPane(tablechargefixe);
				  		     	scrollPane.setBounds(14, 192, 782, 264);
				  		     	add(scrollPane);
				  		     	scrollPane.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
			  		    
				  		     	
				  		     	JXTitledSeparator titledSeparator = new JXTitledSeparator();
				  		     	titledSeparator.setTitle("Liste Charges Fixe ");
				  		     	titledSeparator.setBounds(14, 167, 782, 30);
				  		     	add(titledSeparator);
				  		     	
				  		     	JLayeredPane layeredPane = new JLayeredPane();
				  		     	layeredPane.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
				  		     	layeredPane.setBounds(4, 48, 781, 108);
				  		     	add(layeredPane);
				  		  
				  		  JLabel lblMontant = new JLabel("Montant :");
				  		  lblMontant.setBounds(511, 10, 102, 26);
				  		  layeredPane.add(lblMontant);
		
		  JLabel lblCodeArticle = new JLabel("Code Charge :");
		  lblCodeArticle.setBounds(8, 10, 82, 26);
		  layeredPane.add(lblCodeArticle);
		  lblCodeArticle.setFont(new Font("Tahoma", Font.PLAIN, 11));
		  
		  txtlibelle = new JTextField();
		  txtlibelle.setEditable(false);
		  txtlibelle.setBounds(330, 10, 157, 26);
		  layeredPane.add(txtlibelle);
		  txtlibelle.setColumns(10);
		  
		  JLabel lbllibelle = new JLabel("Libelle :");
		  lbllibelle.setBounds(283, 11, 68, 26);
		  layeredPane.add(lbllibelle);
		  lbllibelle.setFont(new Font("Tahoma", Font.PLAIN, 11));
		    
		    txtMontant = new JTextField();
		    util.Utils.copycoller(txtMontant);
		    txtMontant.setColumns(10);
		    txtMontant.setBounds(577, 11, 157, 26);
		    layeredPane.add(txtMontant);
		    
		    btnAjouter = new JButton("Ajouter");
		    btnAjouter.addActionListener(new ActionListener() {
		    	public void actionPerformed(ActionEvent arg0) {
		    		if(txtcodecharge.getText().equals("") || txtlibelle.getText().equals("") || txtMontant.getText().equals(""))
		    		{
		    			   JOptionPane.showMessageDialog(null, "Veuillez  entrer tous les données SVP", "Erreur", JOptionPane.ERROR_MESSAGE);
		    		}
		    		else
		    		{
		    		try {
		    			
		    			if(Float.valueOf(txtMontant.getText())>0)
		    			{
		    				
		    		Charges charge=chargedao.findByCodeFixe(txtcodecharge.getText());
		    		if(charge!=null)
		    		{
		    		DetailChargeFixe detailchargefixe=new DetailChargeFixe();
		    		//detailchargefixe.setLibelle(txtlibelle.getText());
		    		detailchargefixe.setCharge(charge);
		    		detailchargefixe.setMontant(Float.valueOf(txtMontant.getText()));
		    	
		    		detailchargefixe.setChargeProd(chargeproduction);
		    		listDetailChargeFixe.add(detailchargefixe);
		    		
		    		afficher_tableChargefixe(listDetailChargeFixe);	
		    		intialiser();
		    		
		    		}else
		    		{
		    			 JOptionPane.showMessageDialog(null, "Le code Charge Fixe introuvable", "Erreur", JOptionPane.ERROR_MESSAGE);
		    		}
		    		
		    		
		    			}else
		    			{
		    				JOptionPane.showMessageDialog(null, "le Montant doit etre en supperier à 0 SVP", "Erreur", JOptionPane.ERROR_MESSAGE);
		    			}
		    		
						} catch (NumberFormatException e) {  JOptionPane.showMessageDialog(null, "le Montant doit etre en chiffre SVP", "Erreur", JOptionPane.ERROR_MESSAGE);
							
						}
		    		
		    		
		    		}
		    		
		    	}
		    });
		    btnAjouter.setBounds(278, 73, 107, 24);
		    layeredPane.add(btnAjouter);
		    btnAjouter.setIcon(imgAjouter);
		    
		      btnAjouter.setFont(new Font("Tahoma", Font.PLAIN, 11));
		      btnInitialiser = new JButton("Initialiser");
		      btnInitialiser.setBounds(412, 74, 106, 23);
		      layeredPane.add(btnInitialiser);
		      btnInitialiser.addActionListener(new ActionListener() {
		      	public void actionPerformed(ActionEvent e) {
		      	intialiser();
		      		
		      	}
		      });
		      btnInitialiser.setIcon(imgInit);
		      btnInitialiser.setFont(new Font("Tahoma", Font.PLAIN, 11));
		      
		      txtcodecharge = new JTextField();
		      util.Utils.copycoller(txtcodecharge);
		      txtcodecharge.addKeyListener(new KeyAdapter() {
		      	@Override
		      	public void keyPressed(KeyEvent e) {
		      		if(e.getKeyCode()==e.VK_ENTER)
		      		{
		      			if(!txtcodecharge.getText().equals(""))
		      			{
		      				Charges charge=chargedao.findByCodeFixe(txtcodecharge.getText());
				    		
				    		if(charge!=null)
				    		{	
				    			txtlibelle.setText(charge.getLiblle());
				    			
				    		}else
				    		{
				    			 JOptionPane.showMessageDialog(null, "Code charge Fixe Introuvable !!!!", "Erreur", JOptionPane.ERROR_MESSAGE);
				    			 txtlibelle.setText("");
				    			 txtcodecharge.requestFocus();
				    		}
		      				
		      				
		      		}else
		      		{
		      			 JOptionPane.showMessageDialog(null, "Veuillez  entrer code charge fixe SVP", "Erreur", JOptionPane.ERROR_MESSAGE);
		      			 txtlibelle.setText("");
		      			txtcodecharge.requestFocus();
		      		}
		      		}
		      		
		      		
		      		
		      	}
		      });
		      txtcodecharge.setColumns(10);
		      txtcodecharge.setBounds(96, 10, 157, 26);
		      layeredPane.add(txtcodecharge);
		
	
		
		JLabel Code = new JLabel("Code  :");
		Code.setBounds(35, 13, 89, 24);
		add(Code);
		
		Date = new JLabel("Date  :");
		Date.setBounds(319, 12, 62, 24);
		add(Date);
		
		JDateChooser dateChooser = new JDateChooser();
		dateChooser.addPropertyChangeListener(new PropertyChangeListener() {
		
		
			public void propertyChange(PropertyChangeEvent arg0) {
				if(dateChooser.getDate()!=null)
				{
					 SimpleDateFormat dcn = new SimpleDateFormat("MMyyyy");
				 String date = dcn.format(dateChooser.getDate() );
				txtcodegenerer.setText(date);

				}
			
			}
		});
		
		dateChooser.setLocale(Locale.FRANCE);
		dateChooser.setDateFormatString("dd/MM/yyyy");
		dateChooser.setBounds(398, 11, 181, 26);
		add(dateChooser);
		
		JButton modifbutton = new JButton();
		modifbutton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if(txtcodecharge.getText().equals("") || txtlibelle.getText().equals("") || txtMontant.getText().equals(""))
	    		{
	    		  JOptionPane.showMessageDialog(null, "Veuillez  entrer tous les données SVP", "Erreur", JOptionPane.ERROR_MESSAGE);
	    			   
	    		}
	    		else
	    		{
	    		try {
	    			
	    			if(Float.valueOf(txtMontant.getText())>0)
	    			{
	    				
	    		Charges charge=chargedao.findByCodeFixe(txtcodecharge.getText());
	    		
	    		if(charge!=null)
	    		{
	    			
	    			Integer row=tablechargefixe.getSelectedRow();
	    			if(row!=-1)
	    			{
	    		DetailChargeFixe detailchargefixe=new DetailChargeFixe();
	    		//detailchargefixe.setLibelle(txtlibelle.getText());
	    		detailchargefixe.setMontant(Float.valueOf(txtMontant.getText()));
	    		detailchargefixe.setCharge(charge);
	    		detailchargefixe.setChargeProd(chargeproduction);
	    		listDetailChargeFixe.set(row, detailchargefixe);
	    		afficher_tableChargefixe(listDetailChargeFixe);	
	    		intialiser();
	    			}else
	    			{
	    				 JOptionPane.showMessageDialog(null, "Veuillez selectionner un enregistrement SVP", "Erreur", JOptionPane.ERROR_MESSAGE);
	    			}
	    		
	    		
	    		
	    		}else
	    		{
	    			 JOptionPane.showMessageDialog(null, "Le code charge fixe  introuvable", "Erreur", JOptionPane.ERROR_MESSAGE);
	    		}
	    		
	    		
	    			}else
	    			{
	    				JOptionPane.showMessageDialog(null, "le Montant doit etre en supperier à 0 SVP", "Erreur", JOptionPane.ERROR_MESSAGE);
	    			}
	    		
					} catch (NumberFormatException e) {  JOptionPane.showMessageDialog(null, "le Montant doit etre en chiffre SVP", "Erreur", JOptionPane.ERROR_MESSAGE);
						
					}
	    		
	    		
	    		}
				
			}
		});
		modifbutton.setIcon(imgModifierr);
		modifbutton.setBounds(806, 274, 73, 24);
		add(modifbutton);
		
		JButton suppbutton = new JButton();
		suppbutton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				if(tablechargefixe.getSelectedRow() !=-1)
				{
					
				listDetailChargeFixe.remove(tablechargefixe.getSelectedRow());
				afficher_tableChargefixe(listDetailChargeFixe);	
				intialiser();
					
				}
				else
				{

   				 JOptionPane.showMessageDialog(null, "Veuillez selectionner un enregistrement SVP", "Erreur", JOptionPane.ERROR_MESSAGE);
					
				}
				}
		});
		suppbutton.setIcon(imgSupprimer);
		suppbutton.setBounds(806, 321, 73, 24);
		add(suppbutton);
		
		txtcodegenerer = new JTextField();
		txtcodegenerer.setEditable(false);
		txtcodegenerer.setColumns(10);
		txtcodegenerer.setBounds(134, 11, 162, 26);
		add(txtcodegenerer);
		
		JButton buttonvalider = new JButton("Valider ");
		buttonvalider.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				float totale=0;
				if(txtcodegenerer.getText().equals(""))
						{
					
					 JOptionPane.showMessageDialog(null, "Veuillez selectionner la date SVP", "Erreur", JOptionPane.ERROR_MESSAGE);
					
						}else
						{
							
							if(listDetailChargeFixe.size()>0)
							{
								for(int i=0;i<listDetailChargeFixe.size();i++)
								{
									totale+=listDetailChargeFixe.get(i).getMontant();
								}
								
							ChargeProduction chargeproductiontmp=chargeproductiondao.findbycodeFix(txtcodegenerer.getText(),Constantes.CHARGEST_FIX);
								if(chargeproductiontmp!=null)
								{
									int i=0;
									totale+=chargeproductiontmp.getTotale();
									utilisateur= AuthentificationView.utilisateur;
									Date date=new Date();
									
									chargeproductiontmp.setCode(txtcodegenerer.getText());
									chargeproductiontmp.setDate(date);
									chargeproductiontmp.setDatedesaisi(dateChooser.getDate());
									chargeproductiontmp.setUtilisateurCreation(utilisateur);
									chargeproductiontmp.setUtilisateurMAJ(utilisateur);
									chargeproductiontmp.setDateMiseJours(date);
									chargeproductiontmp.setCodeDepot(utilisateur.getCodeDepot());
									chargeproductiontmp.setTotale(totale);
									chargeproductiontmp.setType(Constantes.CHARGEST_FIX);	
									while(i<listDetailChargeFixe.size())
									{
										DetailChargeFixe detailchargefix=listDetailChargeFixe.get(i);
										detailchargefix.setChargeProd(chargeproductiontmp); 
										listDetailChargeFixe.set(i, detailchargefix);
										i++;
									}
									chargeproductiontmp.setListdetailChargeFixe(listDetailChargeFixe);
									chargeproductiondao.edit(chargeproductiontmp);
									JOptionPane.showMessageDialog(null, "Charge Production Fixe valider avec succée !!!", "Information", JOptionPane.INFORMATION_MESSAGE);
									intialiser();
									listDetailChargeFixe.clear();
									afficher_tableChargefixe(listDetailChargeFixe);
									
								}else
								{
								
								utilisateur= AuthentificationView.utilisateur;
								Date date=new Date();
								//chargeproduction=new ChargeProduction();
								chargeproduction.setCode(txtcodegenerer.getText());
								chargeproduction.setDate(date);
								chargeproduction.setDatedesaisi(dateChooser.getDate());
								chargeproduction.setUtilisateurCreation(utilisateur);
								chargeproduction.setUtilisateurMAJ(utilisateur);
								chargeproduction.setDateMiseJours(date);
								chargeproduction.setCodeDepot(utilisateur.getCodeDepot());
								chargeproduction.setTotale(totale);
								chargeproduction.setType(Constantes.CHARGEST_FIX);
								chargeproduction.setListdetailChargeFixe(listDetailChargeFixe);
								chargeproductiondao.add(chargeproduction);
								JOptionPane.showMessageDialog(null, "Charge Production Fixe valider avec succée !!!", "Information", JOptionPane.INFORMATION_MESSAGE);
								intialiser();
								listDetailChargeFixe.clear();
								afficher_tableChargefixe(listDetailChargeFixe);
								
								}
							}
							else
							{
								 JOptionPane.showMessageDialog(null, "La liste des charges Fixe est vide !!!", "Erreur", JOptionPane.ERROR_MESSAGE);
								
							}
							
							
						}
					
				
				
				
				
			}
		});
		buttonvalider.setIcon(imgValider);
		buttonvalider.setFont(new Font("Tahoma", Font.PLAIN, 11));
		buttonvalider.setBounds(319, 478, 112, 24);
		add(buttonvalider);
		
			}
	
	
	void intialiser()
	{
		txtlibelle.setText("");
		txtcodecharge.setText("");
	     txtMontant.setText("");	
	     txtcodecharge.requestFocus();
	     btnAjouter.setEnabled(true);
		
	}
	
	void afficher_tableChargefixe(List<DetailChargeFixe> listChargefixe)
	{
		modeleChargefixe =new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
						"Code", "Designation", "Montant"
				}
			) {
				boolean[] columnEditables = new boolean[] {
						false,false,false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			};
		tablechargefixe.setModel(modeleChargefixe);
		int i=0;
		 
		while(i<listChargefixe.size())
		{	
			DetailChargeFixe detaichargefixe=listChargefixe.get(i);
			Charges charge=detaichargefixe.getCharge();
			String designation=detaichargefixe.getCharge().getLiblle();
			float montant =detaichargefixe.getMontant();
			Object []ligne={charge.getCode(),designation,montant};

			modeleChargefixe.addRow(ligne);
			i++;
		}
}
}



